{{define "mongo_orm_test"}}package {{.GoPackage | lower}}
{{$obj := .}}

{{if ($obj.DbSwitch "mongo")}}
import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo/integration/mtest"
)

var _ time.Time

type {{.Name}}Suite struct {
	suite.Suite
	ctx context.Context
}

func (s *{{.Name}}Suite) SetupTest() {
	s.ctx = context.TODO()
}

// TearDownTest runs after each test in the suite.
func (s *{{.Name}}Suite) TearDownTest() {
}

// TestSave tests the Save method with various scenarios
func (s *{{.Name}}Suite) TestSave() {
	cases := []struct {
		name    string
		data    {{.Name}}
		wantErr bool
	}{
		{
			name: "save_success",
			data: {{.Name}}{
				{{- range $field := .Fields}}
				{{- if eq $field.Name "ID"}}
				// ID will be auto-generated
				{{- else if eq $field.Type "string"}}
				{{$field.Name}}: "test_{{$field.Name | lower}}",
				{{- else if eq $field.Type "int32"}}
				{{$field.Name}}: 1,
				{{- else if eq $field.Type "int64"}}
				{{$field.Name}}: 1,
				{{- else if eq $field.Type "uint64"}}
				{{$field.Name}}: 1,
				{{- else if eq $field.Type "time.Time"}}
				{{$field.Name}}: time.Now(),
				{{- else if eq $field.Type "bool"}}
				{{$field.Name}}: true,
				{{- else}}
				{{$field.Name}}: {{$field.GetGoType}}{}, // TODO: Set appropriate test value
				{{- end}}
				{{- end}}
			},
			wantErr: false,
		},
	}
	mt := mtest.New(
		s.T(),
		mtest.NewOptions().ClientType(mtest.Mock),
	)
	defer mt.Close()
	for _, c := range cases {
		s.Run(c.name, func() {
			mt.Run(c.name, func(t *mtest.T) {
				if t.Client == nil {
					panic("t.Client is nil - mtest not properly initialized")
				}
				MgoSetup(nil, WithMockStub(t))
				updateResp := mtest.CreateSuccessResponse(
					bson.D{
						{Key: "acknowledged", Value: true},
						{Key: "matchedCount", Value: 1},
						{Key: "modifiedCount", Value: 1},
					}...,
				)
				t.AddMockResponses(updateResp)
				obj := c.data
				_, err := obj.Save(s.ctx)
				if c.wantErr {
					assert.Error(t, err)
				} else {
					assert.NoError(t, err)
				}
			})
		})
	}
}

// TestFindOneAndSave tests the FindOneAndSave method
func (s *{{.Name}}Suite) TestFindOneAndSave() {
	cases := []struct {
		name    string
		data    {{.Name}}
		query   bson.M
		wantErr bool
	}{
		{
			name: "findOneAndSave_success",
			data: {{.Name}}{
				{{- range $field := .Fields}}
				{{- if eq $field.Name "ID"}}
				// ID will be auto-generated
				{{- else if eq $field.Type "string"}}
				{{$field.Name}}: "test_{{$field.Name | lower}}",
				{{- else if eq $field.Type "int32"}}
				{{$field.Name}}: 2,
				{{- else if eq $field.Type "int64"}}
				{{$field.Name}}: 2,
				{{- else if eq $field.Type "uint64"}}
				{{$field.Name}}: 2,
				{{- else if eq $field.Type "time.Time"}}
				{{$field.Name}}: time.Now(),
				{{- else if eq $field.Type "bool"}}
				{{$field.Name}}: false,
				{{- else}}
				{{$field.Name}}: {{$field.GetGoType}}{}, // TODO: Set appropriate test value
				{{- end}}
				{{- end}}
			},
			query: bson.M{
				{{- range $field := .Fields}}
				{{- if and (ne $field.Name "ID") (eq $field.Type "string")}}
				"{{$field.Name}}": "test_{{$field.Name | lower}}",
				{{- break}}
				{{- end}}
				{{- end}}
			},
			wantErr: false,
		},
	}
	mt := mtest.New(
		s.T(),
		mtest.NewOptions().ClientType(mtest.Mock),
	)
	defer mt.Close()
	for _, c := range cases {
		s.Run(c.name, func() {
			mt.Run(c.name, func(t *mtest.T) {
				if t.Client == nil {
					panic("t.Client is nil - mtest not properly initialized")
				}
				MgoSetup(nil, WithMockStub(t))
				// FindOneAndUpdate returns the actual document
				objectID := primitive.NewObjectID()
				findOneAndUpdateResp := mtest.CreateSuccessResponse(bson.D{
					{Key: "value", Value: bson.D{
						{Key: "_id", Value: objectID},
						{{- range $field := .Fields}}
						{{- if ne $field.Name "ID"}}
						{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: c.data.{{$field.Name}}},
						{{- end}}
						{{- end}}
					}},
					{Key: "ok", Value: 1},
				}...)
				t.AddMockResponses(findOneAndUpdateResp)
				obj := c.data
				_, err := obj.FindOneAndSave(s.ctx, c.query)
				if c.wantErr {
					assert.Error(t, err)
				} else {
					assert.NoError(t, err)
				}
			})
		})
	}
}

// TestInsertUnique tests the InsertUnique method
func (s *{{.Name}}Suite) TestInsertUnique() {
	cases := []struct {
		name    string
		data    {{.Name}}
		query   bson.M
		wantErr bool
	}{
		{
			name: "insertUnique_success",
			data: {{.Name}}{
				{{- range $field := .Fields}}
				{{- if eq $field.Name "ID"}}
				// ID will be auto-generated
				{{- else if eq $field.Type "string"}}
				{{$field.Name}}: "unique_{{$field.Name | lower}}",
				{{- else if eq $field.Type "int32"}}
				{{$field.Name}}: 3,
				{{- else if eq $field.Type "int64"}}
				{{$field.Name}}: 3,
				{{- else if eq $field.Type "uint64"}}
				{{$field.Name}}: 3,
				{{- else if eq $field.Type "time.Time"}}
				{{$field.Name}}: time.Now(),
				{{- else if eq $field.Type "bool"}}
				{{$field.Name}}: true,
				{{- else}}
				{{$field.Name}}: {{$field.GetGoType}}{}, // TODO: Set appropriate test value
				{{- end}}
				{{- end}}
			},
			query: bson.M{
				{{- range $field := .Fields}}
				{{- if and (ne $field.Name "ID") (eq $field.Type "string")}}
				"{{$field.Name}}": "unique_{{$field.Name | lower}}",
				{{- break}}
				{{- end}}
				{{- end}}
			},
			wantErr: false,
		},
	}
	mt := mtest.New(
		s.T(),
		mtest.NewOptions().ClientType(mtest.Mock),
	)
	defer mt.Close()
	for _, c := range cases {
		s.Run(c.name, func() {
			mt.Run(c.name, func(t *mtest.T) {
				if t.Client == nil {
					panic("t.Client is nil - mtest not properly initialized")
				}
				MgoSetup(nil, WithMockStub(t))

				updateResp := mtest.CreateSuccessResponse(
					bson.D{
						{Key: "ok", Value: 1},
						{Key: "n", Value: 1},
						{Key: "nModified", Value: 0},
						{Key: "upserted", Value: bson.A{
							bson.D{
								{Key: "index", Value: 0},
								{Key: "_id", Value: primitive.NewObjectID()},
							},
						}},
					}...,
				)
				t.AddMockResponses(updateResp)
				obj := c.data
				saved, err := obj.InsertUnique(s.ctx, c.query)
				if c.wantErr {
					assert.Error(t, err)
				} else {
					assert.NoError(t, err)
					assert.True(t, saved)
				}
			})
		})
	}
}

// TestFindOne tests the FindOne method
func (s *{{.Name}}Suite) TestFindOne() {
	cases := []struct {
		name       string
		query      bson.M
		sortFields interface{}
		wantErr    bool
	}{
		{
			name: "findOne_success",
			query: bson.M{
				{{- range $field := .Fields}}
				{{- if and (ne $field.Name "ID") (eq $field.Type "string")}}
				"{{$field.Name}}": "test_{{$field.Name | lower}}",
				{{- break}}
				{{- end}}
				{{- end}}
			},
			sortFields: {{.Name}}MgoSortField_WRP{ {{.Name}}MgoSortFieldIDAsc},
			wantErr:    false,
		},
	}
	mt := mtest.New(
		s.T(),
		mtest.NewOptions().ClientType(mtest.Mock),
	)
	defer mt.Close()
	for _, c := range cases {
		s.Run(c.name, func() {
			mt.Run(c.name, func(t *mtest.T) {
				if t.Client == nil {
					panic("t.Client is nil - mtest not properly initialized")
				}
				MgoSetup(nil, WithMockStub(t))
				findResp := mtest.CreateCursorResponse(1, "test.{{.Name | lower}}", mtest.FirstBatch, bson.D{
					{Key: "_id", Value: primitive.NewObjectID()},
					{{- range $field := .Fields}}
					{{- if ne $field.Name "ID"}}
					{{- if eq $field.Type "string"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: "test_{{$field.Name | lower}}"},
					{{- else if eq $field.Type "int32"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: int32(1)},
					{{- else if eq $field.Type "int64"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: int64(1)},
					{{- else if eq $field.Type "uint64"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: uint64(1)},
					{{- else if eq $field.Type "time.Time"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: time.Now()},
					{{- else if eq $field.Type "bool"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: true},
					{{- else}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: nil}, // TODO: Set appropriate test value
					{{- end}}
					{{- end}}
					{{- end}}
				})
				t.AddMockResponses(findResp)
				result, err := Get_{{.Name}}Mgr().FindOne(s.ctx, c.query, c.sortFields)
				if c.wantErr {
					assert.Error(t, err)
				} else {
					assert.NoError(t, err)
					assert.NotNil(t, result)
					{{- range $field := .Fields}}
					{{- if and (ne $field.Name "ID") (eq $field.Type "string")}}
					assert.Equal(t, "test_{{$field.Name | lower}}", result.{{$field.Name}})
					{{- break}}
					{{- end}}
					{{- end}}
				}
			})
		})
	}
}

// TestQuery tests the Query method
func (s *{{.Name}}Suite) TestQuery() {
	cases := []struct {
		name       string
		query      bson.M
		limit      int
		offset     int
		sortFields interface{}
		wantErr    bool
	}{
		{
			name: "query_success",
			query: bson.M{
				{{- range $field := .Fields}}
				{{- if and (ne $field.Name "ID") (eq $field.Type "int32")}}
				"{{$field.Name}}": int32(1),
				{{- break}}
				{{- else if and (ne $field.Name "ID") (eq $field.Type "int64")}}
				"{{$field.Name}}": int64(1),
				{{- break}}
				{{- else if and (ne $field.Name "ID") (eq $field.Type "uint64")}}
				"{{$field.Name}}": uint64(1),
				{{- break}}
				{{- else if and (ne $field.Name "ID") (eq $field.Type "string")}}
				"{{$field.Name}}": "test_{{$field.Name | lower}}",
				{{- break}}
				{{- end}}
				{{- end}}
			},
			limit:      10,
			offset:     0,
			sortFields: {{.Name}}MgoSortField_WRP{ {{.Name}}MgoSortFieldIDAsc},
			wantErr:    false,
		},
	}
	mt := mtest.New(
		s.T(),
		mtest.NewOptions().ClientType(mtest.Mock),
	)
	defer mt.Close()
	for _, c := range cases {
		s.Run(c.name, func() {
			mt.Run(c.name, func(t *mtest.T) {
				if t.Client == nil {
					panic("t.Client is nil - mtest not properly initialized")
				}
				MgoSetup(nil, WithMockStub(t))
				first := mtest.CreateCursorResponse(1, "test.{{.Name | lower}}", mtest.FirstBatch, bson.D{
					{Key: "_id", Value: primitive.NewObjectID()},
					{{- range $field := .Fields}}
					{{- if ne $field.Name "ID"}}
					{{- if eq $field.Type "string"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: "test_{{$field.Name | lower}}_1"},
					{{- else if eq $field.Type "int32"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: int32(1)},
					{{- else if eq $field.Type "int64"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: int64(1)},
					{{- else if eq $field.Type "uint64"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: uint64(1)},
					{{- else if eq $field.Type "time.Time"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: time.Now()},
					{{- else if eq $field.Type "bool"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: true},
					{{- else}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: nil}, // TODO: Set appropriate test value
					{{- end}}
					{{- end}}
					{{- end}}
				})
				getMore := mtest.CreateCursorResponse(1, "test.{{.Name | lower}}", mtest.NextBatch, bson.D{
					{Key: "_id", Value: primitive.NewObjectID()},
					{{- range $field := .Fields}}
					{{- if ne $field.Name "ID"}}
					{{- if eq $field.Type "string"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: "test_{{$field.Name | lower}}_2"},
					{{- else if eq $field.Type "int32"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: int32(2)},
					{{- else if eq $field.Type "int64"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: int64(2)},
					{{- else if eq $field.Type "uint64"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: uint64(2)},
					{{- else if eq $field.Type "time.Time"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: time.Now()},
					{{- else if eq $field.Type "bool"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: false},
					{{- else}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: nil}, // TODO: Set appropriate test value
					{{- end}}
					{{- end}}
					{{- end}}
				})
				killCursors := mtest.CreateCursorResponse(0, "test.{{.Name | lower}}", mtest.NextBatch)
				t.AddMockResponses(first, getMore, killCursors)
				cursor, err := Get_{{.Name}}Mgr().Query(s.ctx, c.query, c.limit, c.offset, c.sortFields)
				if c.wantErr {
					assert.Error(t, err)
				} else {
					assert.NoError(t, err)
					assert.NotNil(t, cursor)
					// Close cursor to clean up
					cursor.Close(s.ctx)
				}
			})
		})
	}
}

{{range $index := $obj.Indexes}}
{{- if not $index.IsUnique}}
// TestFindBy{{$index.Name}} tests the FindBy{{$index.Name}} method
func (s *{{$obj.Name}}Suite) TestFindBy{{$index.Name}}() {
	cases := []struct {
		name       string
		{{- range $field := $index.Fields}}
		{{$field.Name | lower}}   {{$field.GetGoType}}
		{{- end}}
		limit      int
		offset     int
		sortFields interface{}
		wantErr    bool
	}{
		{
			name: "findby{{$index.Name | lower}}_success",
			{{- range $field := $index.Fields}}
			{{- if eq $field.Type "string"}}
			{{$field.Name | lower}}: "test_{{$field.Name | lower}}",
			{{- else if eq $field.Type "int32"}}
			{{$field.Name | lower}}: int32(1),
			{{- else if eq $field.Type "int64"}}
			{{$field.Name | lower}}: int64(1),
			{{- else if eq $field.Type "uint64"}}
			{{$field.Name | lower}}: uint64(1),
			{{- else if eq $field.Type "time.Time"}}
			{{$field.Name | lower}}: time.Date(2023, 1, 1, 12, 0, 0, 0, time.UTC),
			{{- else if eq $field.Type "bool"}}
			{{$field.Name | lower}}: true,
			{{- else}}
			{{$field.Name | lower}}: {{$field.GetGoType}}{}, // TODO: Set appropriate test value
			{{- end}}
			{{- end}}
			limit:      10,
			offset:     0,
			sortFields: nil,
			wantErr:    false,
		},
	}
	mt := mtest.New(
		s.T(),
		mtest.NewOptions().ClientType(mtest.Mock),
	)
	defer mt.Close()
	for _, c := range cases {
		s.Run(c.name, func() {
			mt.Run(c.name, func(t *mtest.T) {
				if t.Client == nil {
					panic("t.Client is nil - mtest not properly initialized")
				}
				MgoSetup(nil, WithMockStub(t))
				first := mtest.CreateCursorResponse(1, "test.{{$obj.Name | lower}}", mtest.FirstBatch, bson.D{
					{Key: "_id", Value: primitive.NewObjectID()},
					{{- range $field := $obj.Fields}}
					{{- if ne $field.Name "ID"}}
					{{- if eq $field.Type "string"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: "test_{{$field.Name | lower}}"},
					{{- else if eq $field.Type "int32"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: int32(1)},
					{{- else if eq $field.Type "int64"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: int64(1)},
					{{- else if eq $field.Type "uint64"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: uint64(1)},
					{{- else if eq $field.Type "time.Time"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: time.Date(2023, 1, 1, 12, 0, 0, 0, time.UTC)},
					{{- else if eq $field.Type "bool"}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: true},
					{{- else}}
					{Key: {{$obj.Name}}MgoField{{$field.Name}}, Value: nil}, // TODO: Set appropriate test value
					{{- end}}
					{{- end}}
					{{- end}}
				})
				killCursors := mtest.CreateCursorResponse(0, "test.{{$obj.Name | lower}}", mtest.NextBatch)
				t.AddMockResponses(first, killCursors)
				result, err := Get_{{$obj.Name}}Mgr().FindBy{{$index.Name}}(s.ctx, {{range $i, $field := $index.Fields}}{{if $i}}, {{end}}c.{{$field.Name | lower}}{{end}}, c.limit, c.offset, c.sortFields)
				if c.wantErr {
					assert.Error(t, err)
				} else {
					assert.NoError(t, err)
					assert.NotNil(t, result)
					assert.Len(t, result, 1)
					{{- range $field := $index.Fields}}
					{{- if eq $field.Type "time.Time"}}
					assert.Equal(t, c.{{$field.Name | lower}}.Unix(), result[0].{{$field.Name}}.Unix())
					{{- else}}
					assert.Equal(t, c.{{$field.Name | lower}}, result[0].{{$field.Name}})
					{{- end}}
					{{- end}}
				}
			})
		})
	}
}
{{- end}}
{{- end}}

func Test{{.Name}}(t *testing.T) {
	suite.Run(t, &{{.Name}}Suite{})
}
{{end}}
{{end}}
