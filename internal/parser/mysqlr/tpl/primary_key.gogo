{{define "mysqlr_object_primary_key"}}
{{$primary := .}}
{{$obj := .Obj}}

type {{$primary.Name}} struct{
	{{- range $j, $field := $primary.Fields}}
	{{$field.Name}} {{$field.GetType}}
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) NewPrimaryKey() *{{$primary.Name}} {
		return &{{$primary.Name}}{}
}

func (u *{{$primary.Name}}) Key() string {
	strs := []string{
		{{- range $j, $field := $primary.Fields}}
		"{{$field.Name}}",
			{{- if $field.IsEncode}}
			orm.Encode(fmt.Sprint(u.{{$field.Name}})),
			{{- else}}
			fmt.Sprint(u.{{$field.Name}}),
			{{- end}}
		{{- end}}
	}
	return  strings.Join(strs, ":")
}

func (u *{{$primary.Name}}) Parse(key string) error {
	arr := strings.Split(key, ":")
	if len(arr) % 2 != 0 {
		return fmt.Errorf("key (%s) format error", key)
	}
	kv := map[string]string{}
	for i := 0; i < len(arr) / 2; i++ {
		kv[arr[2*i]] = arr[2*i + 1]
	}
	{{- range $j, $field := $primary.Fields}}
	v{{$field.Name}}, ok := kv["{{$field.Name}}"]
	if !ok {
		return fmt.Errorf("key (%s) without ({{$field.Name}}) field", key)
	}
	{{- if $field.IsEncode}}
	v{{$field.Name}} = orm.Decode(v{{$field.Name}})
	{{- end}}
	if err := orm.StringScan(v{{$field.Name}}, &(u.{{$field.Name}})); err != nil {
		return err
	}
	{{- end}}
	return nil
}

func (u *{{$primary.Name}}) SQLFormat() string {
	conditions := []string{
		{{- range $j, $field := $primary.Fields}}
		"{{$field.FieldName}} = ?",
		{{- end}}
	}
	return orm.SQLWhere(conditions)
}

func (u *{{$primary.Name}}) SQLParams() []interface{} {
	return []interface{}{
		{{- range $j, $field := $primary.Fields}}
		u.{{$field.Name}},
		{{- end}}
	}
}

func (u *{{$primary.Name}}) Columns() []string {
	return []string{
		{{- range $j, $field := $primary.Fields}}
		"{{$field.FieldName}}",
		{{- end}}
	}
}

{{end}}
