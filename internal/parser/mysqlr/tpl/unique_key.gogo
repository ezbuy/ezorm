{{define "mysqlr_object_unique"}}
{{$unique := .}}
{{$obj := .Obj}}


type {{$unique.Name}} struct{
	{{- range $j, $field := $unique.Fields}}
	{{$field.Name}} {{$field.GetType}}
	{{- end}}
}

type {{$unique.Name}}s []*{{$unique.Name}}

func New{{$unique.Name}}s(s []*{{$unique.Name}}) {{$unique.Name}}s {
	return {{$unique.Name}}s(s)
}

func (us {{$unique.Name}}s) SQLFormat(limit bool) string {
	in := orm.NewMultiFieldIN({{$unique.GetFieldNames}})
	for _, u := range us {
		tuple := make([]any,{{ len $unique.Fields }})
	{{- range $j, $field := $unique.Fields}}
		tuple[{{$j}}] = u.{{$field.Name}}
	{{- end}}
		in.Add(tuple)
	}
	return orm.SQLWhere([]string{in.SQLFormat()})
}

func (us {{$unique.Name}}s) SQLParams() []any {
	var ret []any
	for _, u := range us {
	{{- range $j, $field := $unique.Fields}}
		ret = append(ret, u.{{$field.Name}})
	{{- end }}
	}
	return ret
}

func (u *{{$unique.Name}}) Key() string {
	strs := []string{
		{{- range $j, $field := $unique.Fields}}
		"{{$field.Name}}",
			{{- if $field.IsEncode}}
			orm.Encode(fmt.Sprint(u.{{$field.Name}})),
			{{- else}}
			fmt.Sprintf("%v",u.{{$field.Name}}),
			{{- end}}
		{{- end}}
	}
	return  strings.Join(strs, ":")
}

func (u *{{$unique.Name}}) SQLFormat(limit bool) string {
	in := orm.NewMultiFieldIN({{$unique.GetFieldNames}})
	tuple := make([]any,{{ len $unique.Fields }})
	{{- range $j, $field := $unique.Fields}}
	tuple[{{$j}}] = u.{{$field.Name}}
	{{- end}}
	in.Add(tuple)
	return orm.SQLWhere([]string{in.SQLFormat()})
}

func (u *{{$unique.Name}}) SQLParams() []any {
	var ret []any
	{{- range $j, $field := $unique.Fields}}
		ret = append(ret, u.{{$field.Name}})
	{{- end }}
	return ret
}

func (u *{{$unique.Name}}) SQLLimit() int {
	return 1
}

func (u *{{$unique.Name}}) Limit(n int) {
}

func (u *{{$unique.Name}}) Offset(n int) {
}

{{end}}
