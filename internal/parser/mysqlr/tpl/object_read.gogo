{{define "mysqlr_object_read"}}
{{$obj := .}}
{{$indexes := $obj.Indexes}}
{{$uniques := $obj.Uniques}}
{{$primary := $obj.PrimaryKey}}
{{$primaryField := $primary.FirstField }}
type _{{$obj.Name}}DBMgr struct {
	db orm.DB
}

func (m *_{{$obj.Name}}Mgr) DB(db orm.DB) *_{{$obj.Name}}DBMgr {
	return {{$obj.Name}}DBMgr(db)
}

func {{$obj.Name}}DBMgr(db orm.DB) *_{{$obj.Name}}DBMgr {
	if db == nil {
		panic(fmt.Errorf("{{$obj.Name}}DBMgr init need db"))
	}
	return &_{{$obj.Name}}DBMgr{db: db}
}

func (m *_{{$obj.Name}}DBMgr) Search (ctx context.Context, where string, orderby string, limit string, args ...interface{}) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()

    if limit = strings.ToUpper(strings.TrimSpace(limit)); limit !="" && !strings.HasPrefix(limit, "LIMIT") {
	    limit = "LIMIT " + limit
	}

	conditions := []string{where, orderby, limit}
	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(obj.GetColumns(), ","), strings.Join(conditions, " "))
	return m.FetchBySQL(ctx, query, args...)
}

func (m *_{{$obj.Name}}DBMgr) SearchConditions(ctx context.Context,conditions []string, orderby string, offset int, limit int, args ...interface{}) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	q := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s %s %s",
			strings.Join(obj.GetColumns(), ","),
			orm.SQLWhere(conditions),
			orderby,
			orm.SQLOffsetLimit(offset, limit))

	return m.FetchBySQL(ctx,q, args...)
}


func (m *_{{$obj.Name}}DBMgr) SearchCount(ctx context.Context,where string, args ...interface{}) (int64, error){
	return m.queryCount(ctx,where, args...)
}

func (m *_{{$obj.Name}}DBMgr) SearchConditionsCount(ctx context.Context,conditions []string, args ...interface{}) (int64, error){
	return m.queryCount(ctx,orm.SQLWhere(conditions), args...)
}

func (m *_{{$obj.Name}}DBMgr) FetchBySQL(ctx context.Context,q string, args ... interface{}) (results []*{{$obj.Name}}, err error) {
	rows, err := m.db.Query(ctx,q, args...)
	if err != nil {
		return nil, fmt.Errorf("{{$obj.Name}} fetch error: %v", err)
	}
	defer rows.Close()

	{{range $index, $field := $obj.Fields}}
		{{- if $field.IsNullable }}
			var {{$field.Name}} sql.{{$field.GetNullSQLType}}
		{{- else if $field.IsNeedTransform }}
			var {{$field.Name}} {{$field.GetTransform.TypeOrigin}}
		{{- end -}}
	{{- end }}

	for rows.Next() {
		var result {{$obj.Name}}
		err = rows.Scan(
		{{- range $index, $field := $obj.Fields -}}
		{{- if or $field.IsNullable $field.IsNeedTransform -}}
			&{{$field.Name}},
		{{- else -}}
			&(result.{{$field.Name}}),
		{{- end }}
		{{- end -}}
		)
		if err != nil {
			m.db.SetError(err)
			return nil, err
		}

		{{range $index, $field := $obj.Fields}}
			{{- if $field.IsNeedTransform }}
				{{- if $field.IsNullable -}}
					if {{$field.Name}}.Valid {
						{{- with $v := (printf "%sValue" $field.Name)}}
						{{$field.Name}}Value := {{$field.Name}}.{{$field.NullSQLTypeValue}}
						{{$field.Name}}Point := {{- printf $field.GetTransform.ConvertTo $v}}
						result.{{$field.Name}} = &{{$field.Name}}Point
						{{- end}}
					} else {
						result.{{$field.Name}} = nil
					}
				{{- else -}}
				result.{{$field.Name}} = {{- printf $field.GetTransform.ConvertTo $field.Name}}
				{{- end -}}
			{{- else }}
				{{- if $field.IsNullable -}}
					result.{{$field.Name}} =
					{{- if $field.NullSQLTypeNeedCast -}}
					{{$field.GetType}}({{$field.Name}}.{{$field.NullSQLTypeValue}})
					{{- else -}}
					{{$field.Name}}.{{$field.NullSQLTypeValue}}
					{{- end -}}
				{{- end -}}
			{{- end}}
			{{- if $field.IsEncode}}
			result.{{$field.Name}} = orm.Decode(result.{{$field.Name}})
			{{- end}}
		{{end}}
		results = append(results, &result)
	}
	if err = rows.Err() ;err != nil {
		m.db.SetError(err)
		return nil, fmt.Errorf("{{$obj.Name}} fetch result error: %v", err)
	}
	return
}

{{- if ne $obj.DbSource ""}}
func (m *_{{$obj.Name}}DBMgr) Exist(ctx context.Context, pk PrimaryKey) (bool, error) {
	c, err := m.queryCount(ctx, pk.SQLFormat(), pk.SQLParams()...)
	if err != nil {
		return false, err
	}
	return (c != 0), nil
}

// FetchByPrimaryKey fetches a single {{$obj.Name}} by its primary key
// it returns the specific error type(sql.ErrNoRows) when no rows found
func (m *_{{$obj.Name}}DBMgr) FetchByPrimaryKey(ctx context.Context,{{$primary.GetFuncParam}}) (*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	pk := &{{$primary.Name}}{
	{{$primary.GetConstructor}}
	}

	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(obj.GetColumns(), ","), pk.SQLFormat())
	objs, err := m.FetchBySQL(ctx,query, pk.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0], nil
	}
	return nil, sql.ErrNoRows
}


// err not found check
func (m *_{{$obj.Name}}DBMgr) IsErrNotFound(err error) bool {
	return strings.Contains(err.Error(), "not found") || err == sql.ErrNoRows
}

{{- if $primary.IsSingleField}}

// FetchByPrimaryKeys fetches a list of {{$obj.Name}} by its primary keys
// it returns the specific error type(sql.ErrNoRows) when no rows found
func (m *_{{$obj.Name}}DBMgr) FetchByPrimaryKeys(ctx context.Context,{{$primaryField.GetUnderlineNames}} []{{$primaryField.GetType}}) ([]*{{$obj.Name}}, error) {
	size := len({{$primaryField.GetUnderlineNames}})
	if size == 0 {
		return nil, nil
	}
	params := make([]interface{}, 0, size)
	for _, pk := range {{$primaryField.GetUnderlineNames}} {
		params = append(params, pk)
	}
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} WHERE {{$primaryField.FieldName}} IN (?%s)", strings.Join(obj.GetColumns(), ","),
		strings.Repeat(",?", size -1))
	objs,err := m.FetchBySQL(ctx,query, params...)
	if err != nil {
		return nil, err
	}
	if len(objs) == 0 {
		return nil, sql.ErrNoRows
	}
	return objs, nil
}
{{- end}}

// indexes
{{- range $index:=$indexes}}

func (m *_{{$obj.Name}}DBMgr) FindBy{{$index.GetFuncName}}(ctx context.Context,{{$index.GetFuncParam}}, limit int, offset int) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	idx_ := &{{$index.Name}}{
		{{$index.GetConstructor}}limit:   limit,
		offset:  offset,
	}
	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(obj.GetColumns(), ","), idx_.SQLFormat(true))
	return m.FetchBySQL(ctx,query, idx_.SQLParams()...)
}

func (m *_{{$obj.Name}}DBMgr) FindAllBy{{$index.GetFuncName}}(ctx context.Context,{{$index.GetFuncParam}}) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	idx_ := &{{$index.Name}}{
		{{$index.GetConstructor}}
	}

	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(obj.GetColumns(), ","), idx_.SQLFormat(true))
	return m.FetchBySQL(ctx,query, idx_.SQLParams()...)
}

{{- if $index.IsSingleField}}

func (m *_{{$obj.Name}}DBMgr) FindBy{{$index.FirstField.Name}}Group(ctx context.Context,items []{{$index.FirstField.Type}}) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	if len(items) == 0 {
		return nil, nil
	}
	params := make([]interface{}, 0, len(items))
	for _, item := range items {
		params = append(params, item)
	}
	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} where {{$index.FirstField.FieldName}} in (?", strings.Join(obj.GetColumns(), ",")) +
		strings.Repeat(",?", len(items) - 1) + ")"
	return m.FetchBySQL(ctx,query, params...)
}
{{- end}}
{{- end}}

// uniques
{{- range $unique:=$uniques}}

{{ $firstUniqueField := $unique.FirstField }}

{{- if $unique.IsSingleField}}
func (m *_{{$obj.Name}}DBMgr) FetchBy{{$unique.GetFuncName}}s(ctx context.Context,{{$firstUniqueField.GetUnderlineNames}} []{{$firstUniqueField.GetType}}) ([]*{{$obj.Name}}, error) {
	in:= orm.NewFieldIN("{{$firstUniqueField.FieldName}}")
	for _, item := range {{$firstUniqueField.GetUnderlineNames}} {
		in.Add(item)
	}
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	where := orm.SQLWhere([]string{in.SQLFormat()})
	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(obj.GetColumns(), ","), where)
	objs, err := m.FetchBySQL(ctx,query, in.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs, nil
	}
	return nil, fmt.Errorf("FetchBy{{$unique.GetFuncName}}s: %w", sql.ErrNoRows)
}

func (m *_{{$obj.Name}}DBMgr) FetchBy{{$unique.GetFuncName}}(ctx context.Context,{{$firstUniqueField.GetUnderlineName}} {{$firstUniqueField.GetType}}) (*{{$obj.Name}}, error) {
	in:= orm.NewFieldIN("{{$firstUniqueField.FieldName}}")
	in.Add({{$firstUniqueField.GetUnderlineName}})
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	where := orm.SQLWhere([]string{in.SQLFormat()})
	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(obj.GetColumns(), ","), where)
	objs, err := m.FetchBySQL(ctx,query, in.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0], nil
	}
	return nil, fmt.Errorf("FetchBy{{$unique.GetFuncName}}: %w", sql.ErrNoRows)
}

{{- else }}

func (m *_{{$obj.Name}}DBMgr) FetchBy{{$unique.GetFuncName}}(ctx context.Context,uniq *{{$unique.Name}}) (*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()

	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(obj.GetColumns(), ","), uniq.SQLFormat(true))
	objs, err := m.FetchBySQL(ctx,query, uniq.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0], nil
	}
	return nil, fmt.Errorf("FetchBy{{$unique.GetFuncName}}: %w", sql.ErrNoRows)
}

func (m *_{{$obj.Name}}DBMgr) FetchBy{{$unique.GetFuncName}}s(ctx context.Context,us []*{{$unique.Name}}) ([]*{{$obj.Name}}, error) {
	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()

	if len(us) == 0 {
		return nil, nil
	}
	u := New{{$unique.Name}}s(us)
	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(obj.GetColumns(), ","), u.SQLFormat(true))
	objs, err := m.FetchBySQL(ctx,query, u.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs, nil
	}
	return nil, fmt.Errorf("FetchBy{{$unique.GetFuncName}}s: %w", sql.ErrNoRows)
}

{{end}}
{{- end}}

func (m *_{{$obj.Name}}DBMgr) FindOne(ctx context.Context,unique Unique) (PrimaryKey, error) {
	objs, err := m.queryLimit(ctx,unique.SQLFormat(true), unique.SQLLimit(), unique.SQLParams()...)
	if err != nil {
		return nil, err
	}
	if len(objs) > 0 {
		return objs[0], nil
	}
	return nil, fmt.Errorf("{{$obj.Name}} find record not found")
}

func (m *_{{$obj.Name}}DBMgr) FindFetch(ctx context.Context,index Index) (int64, []*{{$obj.Name}}, error) {
	total, err := m.queryCount(ctx,index.SQLFormat(false), index.SQLParams()...)
	if err != nil {
		return total, nil, err
	}

	obj := {{$obj.Name}}Mgr.New{{$obj.Name}}()
	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(obj.GetColumns(), ","), index.SQLFormat(true))
	results, err := m.FetchBySQL(ctx, query, index.SQLParams()...)
	if err != nil {
		return total, nil, err
	}
	return total, results, nil
}


func (m *_{{$obj.Name}}DBMgr) queryLimit(ctx context.Context,where string, limit int, args ...interface{}) (results []PrimaryKey, err error){
	pk := {{$obj.Name}}Mgr.NewPrimaryKey()
	query := fmt.Sprintf("SELECT %s FROM {{$obj.FromDB}} %s", strings.Join(pk.Columns(), ","), where)
	rows, err := m.db.Query(ctx,query, args...)
	if err != nil {
		return nil, fmt.Errorf("{{$obj.Name}} query limit error: %v", err)
	}
	defer rows.Close()

	offset :=0
	{{- range $index, $field := $primary.Fields}}
		{{- if $field.IsNullable }}
			var {{$field.Name}} sql.{{$field.GetNullSQLType}}
		{{- else if $field.IsNeedTransform }}
			var {{$field.Name}} {{$field.GetTransform.TypeOrigin}}
		{{- end -}}
	{{- end }}

	for rows.Next() {
		if limit >= 0 && offset >= limit {
			break
		}
		offset++

		result := {{$obj.Name}}Mgr.NewPrimaryKey()
		err = rows.Scan(
		{{- range $index, $field := $primary.Fields -}}
		{{- if or $field.IsNullable $field.IsNeedTransform -}}
			&{{$field.Name}},
		{{- else -}}
			&(result.{{$field.Name}}),
		{{- end }}
		{{- end -}}
		)
		if err != nil {
			m.db.SetError(err)
			return nil, err
		}

		{{range $index, $field := $primary.Fields}}
			{{- if $field.IsNeedTransform }}
				{{- if $field.IsNullable -}}
					if {{$field.Name}}.Valid {
						{{- with $v := (printf "%sValue" $field.Name)}}
						{{$field.Name}}Value := {{$field.Name}}.{{$field.NullSQLTypeValue}}
						{{$field.Name}}Point := {{- printf $field.GetTransform.ConvertTo $v}}
						result.{{$field.Name}} = &{{$field.Name}}Point
						{{- end}}
					} else {
						result.{{$field.Name}} = nil
					}
				{{- else -}}
				result.{{$field.Name}} = {{- printf $field.GetTransform.ConvertTo $field.Name}}
				{{- end -}}
			{{- else }}
				{{- if $field.IsNullable -}}
					result.{{$field.Name}} =
					{{- if $field.NullSQLTypeNeedCast -}}
					{{$field.GetType}}({{$field.Name}}.{{$field.NullSQLTypeValue}})
					{{- else -}}
					{{$field.Name}}.{{$field.NullSQLTypeValue}}
					{{- end -}}
				{{- end -}}
			{{- end}}
			{{- if $field.IsEncode}}
			result.{{$field.Name}} = orm.Decode(result.{{$field.Name}})
			{{- end}}
		{{end}}
		results = append(results, result)
	}
	if err := rows.Err() ;err != nil {
		m.db.SetError(err)
		return nil, fmt.Errorf("{{$obj.Name}} query limit result error: %v", err)
	}
	return
}


func (m *_{{$obj.Name}}DBMgr) queryCount(ctx context.Context,where string, args ...interface{}) (int64, error){
	query := fmt.Sprintf("SELECT count( {{$primaryField.FieldName}} ) FROM {{$obj.FromDB}} %s", where)
	rows, err := m.db.Query(ctx,query, args...)
	if err != nil {
		return 0, fmt.Errorf("{{$obj.Name}} query count error: %v", err)
	}
	defer rows.Close()

	var count int64
	if rows.Next() {
		if err = rows.Scan(&count); err != nil {
			m.db.SetError(err)
			return 0, err
		}
	}
	return count, nil
}

{{- end}}

{{end}}
