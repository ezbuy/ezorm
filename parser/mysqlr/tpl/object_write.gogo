{{define "mysqlr_object_write"}}
{{$obj := .}}
{{$primary := $obj.PrimaryKey}}
{{$primaryField := $primary.FirstField }}


func (m *_{{$obj.Name}}DBMgr) BatchCreate(ctx context.Context,objs []*{{$obj.Name}}) (int64, error) {
	if len(objs) == 0 {
		return 0, nil
	}

	params := make([]string, 0, len(objs))
	values := make([]interface{}, 0, len(objs)*{{len $obj.NoneIncrementFields}})
	for _, obj := range objs {
		params = append(params, fmt.Sprintf("(%s)", strings.Join(orm.NewStringSlice({{len $obj.NoneIncrementFields}}, "?"), ",")))
		{{- range $i, $field := $obj.Fields -}}
			{{- if not $field.IsAutoIncrement}}
				{{- if and $field.IsNullable $field.IsNeedTransform}}
					if obj.{{$field.Name}} == nil {
						values = append(values, nil)
					} else {
						values = append(values, {{$field.GetTransformValue "obj."}})
					}
				{{- else if $field.IsEncode}}
					values = append(values, orm.Encode({{$field.GetTransformValue "obj."}}))
				{{- else }}
					values = append(values, {{$field.GetTransformValue "obj."}})
				{{- end}}
			{{- end}}
		{{- end}}
	}
	query := fmt.Sprintf("INSERT INTO {{$obj.FromDB}}(%s) VALUES %s", strings.Join(objs[0].GetNoneIncrementColumns(), ","), strings.Join(params, ","))
	result, err := m.db.Exec(ctx,query, values...)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

// argument example:
// set:"a=?, b=?"
// where:"c=? and d=?"
// params:[]interface{}{"a", "b", "c", "d"}...
func (m *_{{$obj.Name}}DBMgr) UpdateBySQL(ctx context.Context,set, where string, args ...interface{}) (int64, error) {
	query := fmt.Sprintf("UPDATE {{$obj.FromDB}} SET %s", set)
	if where != "" {
		query = fmt.Sprintf("UPDATE {{$obj.FromDB}} SET %s WHERE %s", set, where)
	}
	result, err := m.db.Exec(ctx,query, args...)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (m *_{{$obj.Name}}DBMgr) Create(ctx context.Context,obj *{{$obj.Name}}) (int64, error) {
	params := orm.NewStringSlice({{len $obj.NoneIncrementFields}}, "?")
	q := fmt.Sprintf("INSERT INTO {{$obj.FromDB}}(%s) VALUES(%s)",
		strings.Join(obj.GetNoneIncrementColumns(), ","),
		strings.Join(params, ","))

	values := make([]interface{}, 0, {{len $obj.Fields}})
	{{- range $i, $field := $obj.Fields -}}
		{{- if not $field.IsAutoIncrement}}
			{{- if and $field.IsNullable $field.IsNeedTransform}}
				if obj.{{$field.Name}} == nil {
					values = append(values, nil)
				} else {
					values = append(values, {{$field.GetTransformValue "obj."}})
				}
			{{- else if $field.IsEncode}}
					values = append(values, orm.Encode({{$field.GetTransformValue "obj."}}))
			{{- else }}
				values = append(values, {{$field.GetTransformValue "obj."}})
			{{- end}}
		{{- end}}
	{{- end}}
	result, err := m.db.Exec(ctx,q, values...)
	if err != nil {
		return 0, err
	}
	{{- if $primary.IsAutoIncrement}}
		lastInsertId, err := result.LastInsertId()
		if err != nil {
			return 0, err
		}
		obj.{{$primaryField.Name}} = {{$primaryField.GetType}}(lastInsertId)
	{{- end}}
	return result.RowsAffected()
}

func (m *_{{$obj.Name}}DBMgr) Update(ctx context.Context,obj *{{$obj.Name}}) (int64, error) {
	columns := []string{
	{{- range $i, $field := $obj.Fields}}
		{{- if not $field.IsPrimary}}
		"{{$field.FieldName}} = ?",
		{{- end}}
	{{- end}}
	}

	pk := obj.GetPrimaryKey()
	q := fmt.Sprintf("UPDATE {{$obj.FromDB}} SET %s %s", strings.Join(columns, ","), pk.SQLFormat())
	values := make([]interface{}, 0, {{len $obj.Fields}} - {{len $primary.Fields}})
	{{- range $i, $field := $obj.Fields -}}
			{{- if not $field.IsPrimary}}
				{{- if and $field.IsNullable $field.IsNeedTransform}}
					if obj.{{$field.Name}} == nil {
						values = append(values, nil)
					} else {
						values = append(values, {{$field.GetTransformValue "obj."}})
					}
				{{- else if $field.IsEncode}}
					values = append(values, orm.Encode({{$field.GetTransformValue "obj."}}))
				{{- else}}
					values = append(values, {{$field.GetTransformValue "obj."}})
				{{- end}}
			{{- end}}
		{{- end}}
	values = append(values, pk.SQLParams()...)

	result, err := m.db.Exec(ctx,q, values...)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (m *_{{$obj.Name}}DBMgr) Save(ctx context.Context,obj *{{$obj.Name}}) (int64, error) {
	affected, err := m.Update(ctx,obj)
	if err != nil {
		return affected, err
	}
	if affected == 0 {
		return m.Create(ctx,obj)
	}
	return affected, err
}

func (m *_{{$obj.Name}}DBMgr) Delete(ctx context.Context,obj *{{$obj.Name}}) (int64, error) {
	return m.DeleteByPrimaryKey(ctx,{{$primary.GetObjectParam}})
}

func (m *_{{$obj.Name}}DBMgr) DeleteByPrimaryKey(ctx context.Context,{{$primary.GetFuncParam}}) (int64, error) {
	pk:= &{{$primary.Name}}{
	{{$primary.GetConstructor}}
	}
	q := fmt.Sprintf("DELETE FROM {{$obj.FromDB}} %s", pk.SQLFormat())
	result, err := m.db.Exec(ctx,q , pk.SQLParams()...)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

func (m *_{{$obj.Name}}DBMgr) DeleteBySQL(ctx context.Context,where string, args ...interface{}) (int64, error) {
	query := "DELETE FROM {{$obj.FromDB}}"
	if where != "" {
		query = fmt.Sprintf("DELETE FROM {{$obj.FromDB}} WHERE %s", where)
	}
	result, err := m.db.Exec(ctx,query, args...)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
{{end}}
