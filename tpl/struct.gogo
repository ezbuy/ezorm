{{define "struct"}}package {{.GoPackage}}
{{$obj := .}}
{{if eq .Db "mongo"}}
import "gopkg.in/mgo.v2/bson"
{{end}}
import "time"

var _ time.Time

type {{.Name}} struct {
	{{- range $field := .Fields}}
	{{- if or ($obj.DbContains "mssql") }}
	{{- if ($obj.DbSwitch "mssql")}}
	{{$field.Name}}  {{$field.GetGoType}} `db:"{{$field.Name}}"`
	{{- end}}
	{{- else if ($obj.DbContains "mysql") }}
	{{- if ($obj.DbSwitch "mysql")}}
	{{$field.Name}}  {{$field.GetGoType}} `db:"{{camel2name $field.Name}}" json:"{{camel2name $field.Name}}"`
	{{- end}}
	{{- else if ($obj.DbContains "redis") }}
	{{- if ($obj.DbSwitch "redis")}}
	{{$field.Name}}  {{$field.GetGoType}} `json:"{{camel2name $field.Name}}"`
	{{- end}}
	{{- else}}
		{{- if ($obj.DbSwitch "mongo")}}
		{{- if and ($obj.DbContains "mongo") (eq $field.Name "ID")}}
		ID         bson.ObjectId `json:"id" bson:"_id,omitempty"`
		{{- else}}
		{{$field.Name}}  {{$field.GetGoType}} {{$field.BJTag}}
		{{- end -}}
		{{- end}}
	{{- end -}}
	{{- end -}}
	{{- if ($obj.DbContains "mysql")}}
		isNew bool
	{{- end}}
}

func (p *{{.Name}}) GetNameSpace() string {
	return "{{.Package}}"
}

func (p *{{.Name}}) GetClassName() string {
	return "{{.Name}}"
}
{{- if ($obj.DbContains "redis")}}
func (p *{{.Name}}) GetStoreType() string {
	return "{{$obj.StoreType}}"
}

func (p *{{.Name}}) GetPrimaryKey() string {
	return "{{.GetPrimaryKeyName}}"
}
{{- end}}

func (p *{{.Name}}) GetIndexes() []string {
	idx := []string{
	{{- range $field := .Fields}}
	{{- if $field.HasIndex}}
		"{{$field.Name}}",
	{{- end}}
	{{- end}}
	}
	return idx
}

type _{{.Name}}Mgr struct {
}

var {{.Name}}Mgr *_{{.Name}}Mgr

func (m *_{{.Name}}Mgr) New{{.Name}}() *{{.Name}} {
	rval := new({{.Name}})
{{- if ($obj.DbContains "mongo")}}
	rval.isNew = true
	rval.ID = bson.NewObjectId()
{{end -}}

{{- range $field := .Fields}}
	{{- if $field.HasDefaultValue}}
	rval.{{$field.Name}} = "{{$field.DefaultValue}}"
	{{- end -}}
{{- end}}
	return rval
}
{{end}}
