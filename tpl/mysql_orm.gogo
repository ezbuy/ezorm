{{define "mysql_orm"}}package {{.GoPackage}}

{{$obj := .}}
{{if ($obj.DbSwitch "mysql")}}
{{/* Only generate source file for table with primary key */}}
{{$idFieldName := $obj.GetPrimaryKeyName}}
{{$idField := $obj.GetPrimaryKey}}
{{$field := $obj.GetPrimaryKey}}


{{$allFields := join (camel2list $obj.GetFieldNames) "`, `"}}
{{$allFields := printf "`%v`" $allFields}}
{{$nonIdFieldNames := preSuffixJoin ($obj.GetFieldNamesAsArgs "obj.") "" "" ", "}}
{{$idFieldNames := preSuffixJoin ($obj.GetAllNamesAsArgs "obj.") "" "" ", "}}
{{$tag := $obj.GetFieldNameWithDB $obj.Name}}
{{$tbl := $obj.GetFieldNameWithDB (camel2name (strDefault $obj.Table $obj.Name))}}

import (
	"database/sql"
	"fmt"
	"strings"
	"github.com/ezbuy/ezorm/db"
	"time"
	"bytes"
)
var (
	_ time.Time
	_ bytes.Buffer
	_ = strings.Index
)

// -----------------------------------------------------------------------------

func (m *_{{$obj.Name}}Mgr) queryOne(query string, args ...interface{}) (*{{$obj.Name}}, error) {
	ret, err := m.queryLimit(query, 1, args...)
	if err != nil {
		return nil, err
	}
	if len(ret) == 0 {
		return nil, sql.ErrNoRows
	}
	return ret[0], nil
}

func (m *_{{$obj.Name}}Mgr) query(query string, args ...interface{}) (results []*{{$obj.Name}}, err error){
	return m.queryLimit(query, -1, args...)
}

func (m *_{{$obj.Name}}Mgr) Query(query string, args ...interface{}) (results []*{{$obj.Name}}, err error) {
	return m.queryLimit(query, -1, args...)
}

func (*_{{$obj.Name}}Mgr) queryLimit(query string, limit int, args ...interface{}) (results []*{{$obj.Name}}, err error){
	rows, err := db.MysqlQuery(query, args...)
	if err != nil {
		return nil, fmt.Errorf("{{$tag}} query error: %v", err)
	}
	defer rows.Close()

	{{range $index, $field := $obj.Fields}}
	{{- if $field.IsNullablePrimitive }}
	var {{$field.Name}} sql.{{$field.GetNullSQLType}}
	{{- else if $field.IsNeedTransform }}
	var {{$field.Name}} {{$field.GetTransformType.TypeOrigin}}
	{{- end -}}
	{{- end }}

	offset :=0
	for rows.Next() {
		if limit >= 0 && offset >= limit {
			break
		}
		offset++
		
		var result {{$obj.Name}}
		err := rows.Scan(
		{{- range $index, $field := $obj.Fields -}}
		{{- if or $field.IsNullablePrimitive $field.IsNeedTransform -}}
			&{{$field.Name}},
		{{- else -}}
			&(result.{{$field.Name}}),
		{{ end }}
		{{- end -}}
		)
		if err != nil {
			return nil, err
		}

		{{range $index, $field := $obj.Fields}}
		{{- if $field.IsNullablePrimitive}}
			result.{{$field.Name}} =
			{{- if $field.NullSQLTypeNeedCast -}}
				{{$field.GetGoType}}({{$field.Name}}.{{$field.NullSQLTypeValue}})
			{{- else -}}
			{{$field.Name}}.{{$field.NullSQLTypeValue}}
			{{- end -}}
		{{ else if $field.IsNeedTransform }}
		   result.{{$field.Name}} =
		   {{- printf $field.GetTransformType.ConvertTo $field.Name}}
		{{end -}}
		{{end}}

		results = append(results, &result)
	}
	if err := rows.Err() ;err != nil {
		return nil, fmt.Errorf("{{$tag}} fetch result error: %v", err)
	}

	return
}

{{ if $field }}
{{if ne $obj.Table ""}}

{{- if $idField.DisableAutoInc}}
func (m *_{{$obj.Name}}Mgr) Insert(obj *{{$obj.Name}}) (sql.Result, error) {
	 return m.saveInsert(obj)
}

func (m *_{{$obj.Name}}Mgr) UpdateObj(obj *{{$obj.Name}}) (sql.Result, error) {
	 return m.saveUpdate(obj)
}

{{end}}

func (m *_{{$obj.Name}}Mgr) Save(obj *{{$obj.Name}}) (sql.Result, error) {
	{{- if $idField.DisableAutoInc}}
	// upsert
	result, err := m.saveUpdate(obj)
	if err != nil {
		return nil, err
	}
	n, err := result.RowsAffected()
	if err != nil {
		return nil, err
	}
	if n != 0 {
	   return result, nil
	}
	return m.saveInsert(obj)
	{{ else }}
	if obj.{{$idFieldName}} == 0 {
		return m.saveInsert(obj)
	}
	return m.saveUpdate(obj)
	{{- end }}
}

func (m *_{{$obj.Name}}Mgr) saveInsert(obj *{{$obj.Name}}) (sql.Result, error) {
	{{- if $idField.DisableAutoInc}}
	if obj.{{$idFieldName}} == 0 {
	   return nil, fmt.Errorf("missing Id: {{$idFieldName}}")
	}

	query := "INSERT INTO {{$tbl}} (`
	{{- join (camel2list $obj.GetFieldNames) "`, `" -}}
	`) VALUES (
	{{- repeatJoin (len $obj.GetFieldNames) "?" ", " -}}
	)"
	result, err := db.MysqlExec(query, {{$idFieldNames}})
	if err != nil {
		return result, err
	}

	{{else}}
	query := "INSERT INTO {{$tbl}} (`
	{{- join (camel2list $obj.GetNonIdFieldNames) "`, `" -}}
	`) VALUES (
	{{- repeatJoin (len $obj.GetNonIdFieldNames) "?" ", " -}}
	)"
	result, err := db.MysqlExec(query, {{$nonIdFieldNames}})
	if err != nil {
		return result, err
	}

	lastInsertId, err := result.LastInsertId()
	if err != nil {
		return result, err
	}

	obj.{{$idFieldName}} = {{$idField.Type}}(lastInsertId)
	{{ end }}

	return result, err
}

func (m *_{{$obj.Name}}Mgr) saveUpdate(obj *{{$obj.Name}}) (sql.Result, error) {
	query := "UPDATE {{$tbl}} SET
	{{- preSuffixJoin (camel2list $obj.GetNonIdFieldNames) " `" "`=?" "," }} WHERE `{{camel2name $field.Name}}`=?"
	return db.MysqlExec(query, {{$nonIdFieldNames}}, obj.{{$field.Name}})
}

func (m *_{{$obj.Name}}Mgr) InsertBatch(objs []*{{$obj.Name}}) (sql.Result, error) {
	if len(objs) == 0 {
		return nil, fmt.Errorf("Empty insert")
	}

	values := make([]string, 0, len(objs))
	params := make([]interface{}, 0, len(objs) * {{(len $obj.GetNonIdFieldNames)}})
	for _, obj := range objs {
		values = append(values, "({{- repeatJoin (len $obj.GetNonIdFieldNames) "?" ", " -}})")
		params = append(params, {{$nonIdFieldNames}})
	}
	query := fmt.Sprintf("INSERT INTO {{$tbl}} (`{{- join (camel2list $obj.GetNonIdFieldNames) "`, `" -}}`) VALUES %s", strings.Join(values, ","))
	return db.MysqlExec(query, params...)
}


func (m *_{{$obj.Name}}Mgr) FindByID(id {{$idField.Type}}) (*{{$obj.Name}}, error) {
	query := "SELECT {{$allFields}} FROM {{$tbl}} WHERE {{camel2name $idFieldName}}=?"
	return m.queryOne(query, id)
}

func (m *_{{$obj.Name}}Mgr) FindByIDs(ids []{{$idField.Type}}) ([]*{{$obj.Name}}, error) {
	idsLen := len(ids)
	placeHolders := make([]string, 0, idsLen)
	args := make([]interface{}, 0, idsLen)
	for _, id := range ids {
		placeHolders = append(placeHolders, "?")
		args = append(args, id)
	}

	query := fmt.Sprintf(
		"SELECT {{$allFields}} FROM {{$tbl}} WHERE {{camel2name $idFieldName}} IN (%s)",
		strings.Join(placeHolders, ","))
	return m.query(query, args...)
}

func (m *_{{$obj.Name}}Mgr) FindIn{{$idField.Name}}(ids []{{$idField.Type}}, sortFields ...string) ([]*{{$obj.Name}}, error) {
	return m.FindByIDs(ids)
}

func (m *_{{$obj.Name}}Mgr) FindList{{$idField.Name}}({{$idField.Name}} []{{$idField.Type}}) ([]*{{$obj.Name}}, error) {
	 retmap, err := m.FindMap{{$idField.Name}}({{$idField.Name}})
	 if err != nil {
	 	return nil, err
	 }
	 ret := make([]*{{$obj.Name}}, len({{$idField.Name}}))
	 for idx, key := range {{$idField.Name}} {
	 	 ret[idx] = retmap[key]
	 }
	 return ret, nil
}

func (m *_{{$obj.Name}}Mgr) FindMap{{$idField.Name}}({{$idField.Name}} []{{$idField.Type}}, sortFields ...string) (map[{{$idField.Type}}]*{{$obj.Name}}, error) {
	ret, err := m.FindIn{{$idField.Name}}({{$idField.Name}}, sortFields...)
	if err != nil {
	   return nil, err
	}
	retmap := make(map[{{$idField.Type}}]*{{$obj.Name}}, len(ret))
	for _, n := range ret {
		retmap[n.{{$idField.Name}}] = n
	}
	return retmap, nil
}


{{range $index := $obj.Indexes}}

{{if $index.CanUseFindList }}
{{$field := $index.GetFirstField}}

func (m *_{{$obj.Name}}Mgr) FindList{{$index.Name}}({{$index.GetFuncParamIn}}) ([]*{{$obj.Name}}, error) {
	 retmap, err := m.FindMap{{$index.Name}}({{$field.Name}})
	 if err != nil {
	 	return nil, err
	 }
	 ret := make([]*{{$obj.Name}}, len({{$index.Name}}))
	 for idx, key := range {{$index.Name}} {
	 	 ret[idx] = retmap[key]
	 }
	 return ret, nil
}

func (m *_{{$obj.Name}}Mgr) FindMap{{$index.Name}}({{$index.GetFuncParamIn}}) (map[{{$field.Type}}]*{{$obj.Name}}, error) {
	ret, err := m.FindIn{{$index.Name}}({{$index.GetFuncParamOriNames}})
	if err != nil {
	   return nil, err
	}
	retmap := make(map[{{$field.Type}}]*{{$obj.Name}}, len(ret))
	for _, n := range ret {
		retmap[n.{{$field.Name}}] = n
	}
	return retmap, nil
}
{{end}}

{{if $index.CanUseFindIn }}
func (m *_{{$obj.Name}}Mgr) FindIn{{$index.Name}}({{$index.GetFuncParamIn}}, sortFields ...string) ( []*{{$obj.Name}},  error) {
	buf := bytes.NewBuffer(nil)
	buf.WriteString("SELECT {{$allFields}} FROM {{$tbl}} WHERE ")
	{{- range $idx, $field := $index.Fields}}
	
	buf.WriteString("`{{camel2name $field.Name}}` in ")
	{{$index.GetFindInIds $idx "buf" $field.Name}}
	{{- if (lt $idx (minus (len $index.Fields) 1)) }}
	buf.WriteString(" AND ")
	{{- end -}}
	
	{{end}}
	return m.query(buf.String() + m.GetSort(sortFields))
}
{{ end }}


{{if $index.IsUnique }}
func (m *_{{$obj.Name}}Mgr) FindOneBy{{$index.Name}}({{$index.GetFuncParam}}) (*{{$obj.Name}}, error) {
	query := "SELECT {{$allFields}} FROM {{$tbl}} WHERE
	{{- preSuffixJoin (camel2list $index.FieldNames) " " "=?" " AND" -}}"
	return m.queryOne(query, {{$index.GetFuncParamNames}})
}
{{else}}
func (m *_{{$obj.Name}}Mgr) FindAllBy{{$index.Name}}({{$index.GetFuncParam}}, sortFields ...string) ( []*{{$obj.Name}}, error) {
	 return m.FindBy{{$index.Name}}({{$index.GetFuncParamOriNames}}, -1, -1, sortFields...)
}

func (m *_{{$obj.Name}}Mgr) FindBy{{$index.Name}}({{$index.GetFuncParam}}, offset int, limit int, sortFields ...string) ( []*{{$obj.Name}},  error) {
	query := fmt.Sprintf("SELECT {{$allFields}} FROM {{$tbl}} WHERE
	{{- preSuffixJoin (camel2list $index.FieldNames) " `" "`=? " "AND" -}}
	%s%s", m.GetSort(sortFields), m.GetLimit(offset, limit))

	return m.query(query, {{$index.GetFuncParamNames}})
}
{{end}}
{{end}}

func (m *_{{$obj.Name}}Mgr) FindOne(where string, args ...interface{}) (*{{$obj.Name}}, error) {
	query := m.GetQuerysql(where) + m.GetLimit(0, 1)
	return m.queryOne(query, args...)
}


func (m *_{{$obj.Name}}Mgr) Find(where string, args ...interface{}) ([]*{{$obj.Name}}, error) {
	query := m.GetQuerysql(where)
	return m.query(query, args...)
}

func (m *_{{$obj.Name}}Mgr) FindAll() (results []*{{$obj.Name}}, err error) {
	return m.Find("")
}

func (m *_{{$obj.Name}}Mgr) FindWithOffset(where string, offset int, limit int, args ...interface{}) ([]*{{$obj.Name}}, error) {
	query := m.GetQuerysql(where)

	query = query + " LIMIT ?, ?"

	args = append(args, offset)
	args = append(args, limit)

	return m.query(query, args...)
}


func (m *_{{$obj.Name}}Mgr) GetQuerysql(where string) string {
	query := "SELECT {{$allFields}} FROM {{$tbl}}"

	where = strings.TrimSpace(where)
	if where != "" {
		upwhere := strings.ToUpper(where)

		if !strings.HasPrefix(upwhere, "WHERE") && !strings.HasPrefix(upwhere, "ORDER BY") {
			where = " WHERE " + where
		}

		query = query + where
	}

	return query
}

func (m *_{{$obj.Name}}Mgr) Del(where string, params ...interface{}) (sql.Result, error) {
	if where != "" {
	   where = "WHERE " + where
	}
	query := "DELETE FROM {{$tbl}} " + where
	return db.MysqlExec(query, params...)
}

// argument example:
// set:"a=?, b=?"
// where:"c=? and d=?"
// params:[]interface{}{"a", "b", "c", "d"}...
func (m *_{{$obj.Name}}Mgr) Update(set, where string, params ...interface{}) (sql.Result, error) {
	query := fmt.Sprintf("UPDATE {{$tbl}} SET %s", set)
	if where != "" {
		query = fmt.Sprintf("UPDATE {{$tbl}} SET %s WHERE %s", set, where)
	}
	return db.MysqlExec(query, params...)
}

func (m *_{{$obj.Name}}Mgr) Count(where string, args ...interface{}) (int32, error) {
	query := "SELECT COUNT(*) FROM {{$tbl}}"
	if where != "" {
		query = query + " WHERE " + where
	}

	rows, err := db.MysqlQuery(query, args...)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	var count int32
	if rows.Next() {
		err = rows.Scan(&count)
	}
	if err := rows.Err(); err != nil {
	   return 0, err
	}

	return count, nil
}
{{end}}


func (m *_{{$obj.Name}}Mgr) GetSort(sorts []string) string {
	 if len(sorts) == 0 {
	 	return ""
	 }
	 buf := bytes.NewBuffer(nil)
	 buf.WriteString(" ORDER BY ")
	 for idx, s := range sorts {
	 	 if len(s) == 0 {
		 	continue
		 }
		 if s[0] == '-' {
		 	 buf.WriteString(s[1:] + " DESC")
		 } else {
		 	 buf.WriteString(s)
		 }
		 if idx == len(sorts) - 1 {
		 	break
		 }
		 buf.WriteString(",")
	 }
	 return buf.String()
}

func (m *_{{$obj.Name}}Mgr) GetLimit(offset, limit int) string {
	 if limit <= 0 {
	 	return ""
	 }
	 if offset <= 0 {
	 	return fmt.Sprintf(" LIMIT %d", limit)
	 }
	 return fmt.Sprintf(" LIMIT %d, %d", offset, limit)
}

{{- end -}}
{{- end -}}
{{- end -}}

