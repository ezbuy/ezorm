{{define "mongo_collection"}}
//Collection Manage methods
{{$obj := .}}
func (o *_{{.Name}}Mgr) FindOne(query interface{}, sortFields ...string) (result *{{$obj.Name}}, err error) {
	session, col := {{.Name}}Mgr.GetCol()
	defer session.Close()

	q := col.Find(query)

	_{{$obj.Name}}Sort(q, sortFields)

	err = q.One(&result)
	return
}

// _{{$obj.Name}}Sort 将排序字段应用到查询对象中，如果找不到有效的排序字段，则默认使用 `-_id` 作为排序字段
func _{{$obj.Name}}Sort(q *mgo.Query, sortFields []string) {
	sortFields = XSortFieldsFilter(sortFields)
	if len(sortFields) > 0 {
		q.Sort(sortFields...)
		return
	}

	q.Sort("-_id")
}

// Query 按照查询条件、分页、排序等构建 MongoDB 查询对象，默认情况按照插入倒序返回全量数据
//   - 如果 limit 小于等于 0，则忽略该参数
//   - 如果 offset 小于等于 0，则忽略该参数
//   - 排序字段参数为空或非法，则使用 `-_id` 作为排序条件（注意：如果表数据量很大，请显式传递排序字段，否则会发生慢查询）
func (o *_{{.Name}}Mgr) Query(query interface{}, limit, offset int, sortFields []string) (*mgo.Session, *mgo.Query) {
	session, col := {{.Name}}Mgr.GetCol()
	q := col.Find(query)
	if limit > 0 {
		q.Limit(limit)
	}
	if offset > 0 {
		q.Skip(offset)
	}

	_{{$obj.Name}}Sort(q, sortFields)
	return session, q
}

// NQuery 按照查询条件、分页、排序等构建 MongoDB 查询对象，如果不指定排序字段，则可能无法保证返回数据的顺序，
// 建议在保证返回数据唯一的情况下使用
// Ref: https://docs.mongodb.com/manual/reference/method/cursor.sort/#return-in-natural-order
//   - 如果 limit 小于等于 0，则忽略该参数
//   - 如果 offset 小于等于 0，则忽略该参数
//   - 排序字段参数为空或非法，则忽略该参数
func (o *_{{.Name}}Mgr) NQuery(query interface{}, limit, offset int, sortFields []string) (*mgo.Session, *mgo.Query) {
	session, col := {{.Name}}Mgr.GetCol()
	q := col.Find(query)
	if limit > 0 {
		q.Limit(limit)
	}
	if offset > 0 {
		q.Skip(offset)
	}

	if sortFields = XSortFieldsFilter(sortFields); len(sortFields) > 0 {
		q.Sort(sortFields...)
	}

	return session, q
}

{{- range $index := $obj.Indexes}}
{{- if $index.IsUnique }}
func (o *_{{$obj.Name}}Mgr) FindOneBy{{$index.Name}}({{$index.GetFuncParam}}) (result *{{$obj.Name}}, err error) {
	query := db.M{
		{{- range $field := $index.Fields}}
		"{{$field.Name}}": {{$field.Name}},
		{{- end}}
	}
	session, q := {{$obj.Name}}Mgr.NQuery(query, 1, 0, nil)
	defer session.Close()
	err = q.One(&result)
	return
}

func (o *_{{$obj.Name}}Mgr) MustFindOneBy{{$index.Name}}({{$index.GetFuncParam}}) (result *{{$obj.Name}}) {
	result, _ = o.FindOneBy{{$index.Name}}({{$index.GetFuncParamNames}})
	if result == nil {
		result = {{$obj.Name}}Mgr.New{{$obj.Name}}()
		{{- range $field := $index.Fields}}
		result.{{$field.Name}} = {{$field.Name}}
		{{- end}}
		result.Save()
	}
	return
}

func (o *_{{$obj.Name}}Mgr) RemoveBy{{$index.Name}}({{$index.GetFuncParam}}) (err error) {
	session, col := {{$obj.Name}}Mgr.GetCol()
	defer session.Close()

	query := db.M{
		{{- range $field := $index.Fields}}
		"{{$field.Name}}": {{$field.Name}},
		{{- end}}
	}
	return col.Remove(query)
}

{{- else}}
func (o *_{{$obj.Name}}Mgr) FindBy{{$index.Name}}({{$index.GetFuncParam}}, limit int, offset int, sortFields ...string) (result []*{{$obj.Name}}, err error) {
	query := db.M{
		{{- range $field := $index.Fields}}
		"{{$field.Name}}": {{$field.Name}},
		{{- end}}
	}
	session, q := {{$obj.Name}}Mgr.Query(query, limit, offset, sortFields)
	defer session.Close()
	err = q.All(&result)
	return
}
{{- end}}
{{- end}}

func (o *_{{.Name}}Mgr) Find(query interface{}, limit int, offset int, sortFields ...string) (result []*{{$obj.Name}}, err error) {
	session, q := {{.Name}}Mgr.Query(query, limit, offset, sortFields)
	defer session.Close()
	err = q.All(&result)
	return
}

func (o *_{{.Name}}Mgr) FindAll(query interface{}, sortFields ...string) (result []*{{$obj.Name}}, err error) {
	session, q := {{.Name}}Mgr.Query(query, -1, -1, sortFields)
	defer session.Close()
	err = q.All(&result)
	return
}

func (o *_{{.Name}}Mgr) Has(query interface{}) bool {
	session, col := {{.Name}}Mgr.GetCol()
	defer session.Close()

	var ret interface{}
	err := col.Find(query).One(&ret)
	if err != nil || ret == nil {
		return false
	}
	return true
}

func (o *_{{.Name}}Mgr) Count(query interface{}) (result int) {
	result, _ = o.CountE(query)
	return
}

func (o *_{{.Name}}Mgr) CountE(query interface{}) (result int, err error) {
    session, col := {{.Name}}Mgr.GetCol()
    defer session.Close()

    result, err = col.Find(query).Count()
    return
}

func (o *_{{.Name}}Mgr) FindByIDs(id []string, sortFields ...string) (result []*{{$obj.Name}}, err error) {
	ids := make([]bson.ObjectId, 0, len(id))
	for _, i := range id {
		if bson.IsObjectIdHex(i) {
			ids = append(ids, bson.ObjectIdHex(i))
		}
	}
	return {{.Name}}Mgr.FindAll(db.M{"_id": db.M{"$in": ids}}, sortFields...)
}

func (m *_{{.Name}}Mgr) FindByID(id string) (result *{{$obj.Name}}, err error) {
	session, col := {{.Name}}Mgr.GetCol()
	defer session.Close()

	if !bson.IsObjectIdHex(id) {
		err = mgo.ErrNotFound
		return
	}
	err = col.FindId(bson.ObjectIdHex(id)).One(&result)
	return
}

func (m *_{{.Name}}Mgr) RemoveAll(query interface{}) (info *mgo.ChangeInfo, err error) {
	session, col := {{.Name}}Mgr.GetCol()
	defer session.Close()

	return col.RemoveAll(query)
}

func (m *_{{.Name}}Mgr) RemoveByID(id string) (err error) {
	session, col := {{.Name}}Mgr.GetCol()
	defer session.Close()

	if !bson.IsObjectIdHex(id) {
		err = mgo.ErrNotFound
		return
	}
	err = col.RemoveId(bson.ObjectIdHex(id))
	{{if .NeedSearch}}
	core.Delete("{{$obj.SearchIndex}}", "{{$obj.SearchType}}", id, nil)
	{{end}}
	return
}

func (m *_{{.Name}}Mgr) GetCol() (session *mgo.Session, col *mgo.Collection) {
    if mgoInstances == nil {
        return db.GetCol("{{.DbName}}",{{if eq .Table ""}}"{{.Package}}.{{.Name}}"{{else}}"{{.Table}}"{{end}})
    }
    return getCol("{{.DbName}}",{{if eq .Table ""}}"{{.Package}}.{{.Name}}"{{else}}"{{.Table}}"{{end}})
}

{{/*
func {{.Name}}FindAndModify(query interface{}, op mgo.Change) (ret *{{.Name}}, err error) {
	session, col := {{.Name}}Mgr.GetCol()
	defer session.Close()

	_, err = col.Find(query).Apply(op, &ret)
	return
}


func {{.Name}}Update(query, update interface{}) error {
	session, col := {{.Name}}Mgr.GetCol()
	defer session.Close()

	err := col.Update(query, update)
	return err
}

func {{.Name}}UpdateAll(query, update interface{}) (*mgo.ChangeInfo, error) {
	session, col := {{.Name}}Mgr.GetCol()
	defer session.Close()

	info, err := col.UpdateAll(query, update)
	return info, err
}

func {{.Name}}UpdateAndFind(query, update interface{}) (*{{.Name}}, error) {
	return {{.Name}}FindAndModify(query, mgo.Change{
		Update: db.M{"$set": update},
		ReturnNew: true,
	})
}

func {{.Name}}Set(query, update interface{}) error {
	return {{.Name}}Update(query, bson.M{"$set": update})
}

func {{.Name}}SetAll(query, update interface{}) (*mgo.ChangeInfo, error) {
	return {{.Name}}UpdateAll(query, bson.M{"$set": update})
}
*/}}
{{end}}
