{{define "mssql_orm"}}package {{.Package}}
{{$obj := .}}
{{$idFieldName := printf "%sId" .Name}}
{{/* Only generate source file for table with primary key */}}
{{range $index, $field := $obj.Fields}}
{{if eq $field.Name $idFieldName}}
{{$idField := $field}}
{{$allFields := join $obj.GetFieldNames ", "}}
{{$nonIdFieldNames := preSuffixJoin $obj.GetNonIdFieldNames "obj." "" ", "}}


import (
	"database/sql"
	"fmt"
	"strings"
	{{range $obj.GetOrmImports}}
	"{{.}}"
	{{end}}
)

func (m *_{{$obj.Name}}Mgr) query(query string, args ...interface{}) ([]*{{$obj.Name}}, error) {
	rows, err := _db.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()


	{{range $index, $field := $obj.Fields}}
	{{- if $field.IsNullable}}
		var {{$field.Name}} sql.{{$field.GetNullSQLType}}
	{{- end -}}
	{{end}}


	var results []*{{$obj.Name}}
	for rows.Next() {
		var result {{$obj.Name}}
		err := rows.Scan(
		{{- range $index, $field := $obj.Fields -}}
		{{- if $field.IsNullable -}}
			&{{$field.Name}},
		{{- else -}}
		&(result.{{$field.Name}}),
		{{- end -}}
		{{- end -}}
		)
		if err != nil {
			return nil, err
		}

		{{range $index, $field := $obj.Fields}}
		{{- if $field.IsNullable}}
			result.{{$field.Name}} =
			{{- if $field.NullSQLTypeNeedCast -}}
				{{$field.GetGoType}}({{$field.Name}}.{{$field.NullSQLTypeValue}})
			{{- else -}}
			{{$field.Name}}.{{$field.NullSQLTypeValue}}
			{{- end -}}
		{{end -}}
		{{end}}

		results = append(results, &result)
	}
	return results, nil
}


func (m *_{{$obj.Name}}Mgr) queryOne(query string, args ...interface{}) (*{{$obj.Name}}, error) {
	row := _db.QueryRow(query, args...)

	{{range $index, $field := $obj.Fields}}
	{{- if $field.IsNullable}}
		var {{$field.Name}} sql.{{$field.GetNullSQLType}}
	{{- end -}}
	{{end}}


	var result {{$obj.Name}}
	err := row.Scan(
	{{- range $index, $field := $obj.Fields -}}
	{{- if $field.IsNullable -}}
		&{{$field.Name}},
	{{- else -}}
	&(result.{{$field.Name}}),
	{{- end -}}
	{{- end -}}
	)
	if err != nil {
		return nil, err
	}

	{{range $index, $field := $obj.Fields}}
	{{- if $field.IsNullable}}
		result.{{$field.Name}} =
		{{- if $field.NullSQLTypeNeedCast -}}
			{{$field.GetGoType}}({{$field.Name}}.{{$field.NullSQLTypeValue}})
		{{- else -}}
		{{$field.Name}}.{{$field.NullSQLTypeValue}}
		{{- end -}}
	{{end -}}
	{{end}}

	return &result, nil
}


func (m *_{{$obj.Name}}Mgr) Save(obj *{{$obj.Name}}) (sql.Result, error) {
	if obj.{{$idFieldName}} == 0 {
		return m.saveInsert(obj)
	}
	return m.saveUpdate(obj)
}

func (m *_{{$obj.Name}}Mgr) saveInsert(obj *{{$obj.Name}}) (sql.Result, error) {
	query := "INSERT INTO [dbo].[{{$obj.Name}}] (
	{{- join $obj.GetNonIdFieldNames ", " -}}
	) VALUES (
	{{- repeatJoin (len $obj.GetNonIdFieldNames) "?" ", " -}}
	)"
	result, err := _sqlServer.Exec(query, {{$nonIdFieldNames}})
	if err != nil {
		return result, err
	}

	lastInsertId, err := result.LastInsertId()
	if err != nil {
		return result, err
	}

	obj.{{$idFieldName}} = {{$idField.Type}}(lastInsertId)

	return result, err
}

func (m *_{{$obj.Name}}Mgr) saveUpdate(obj *{{$obj.Name}}) (sql.Result, error) {
	query := "UPDATE [dbo].[{{$obj.Name}}] SET
	{{- preSuffixJoin $obj.GetNonIdFieldNames " " "=?" "," }} WHERE {{$field.Name}}=?"
	return _sqlServer.Exec(query, {{$nonIdFieldNames}}, obj.{{$field.Name}})
}

func (m *_{{$obj.Name}}Mgr) FindByID(id {{$idField.Type}}) (*{{$obj.Name}}, error) {
	query := "SELECT {{$allFields}} FROM [dbo].[{{$obj.Name}}] WHERE {{$idFieldName}}=?"
	return m.queryOne(query, id)
}

{{range $index := $obj.Indexes}}
{{if $index.IsUnique }}
func (m *_{{$obj.Name}}Mgr) FindOneBy{{$index.Name}}({{$index.GetFuncParam}}) (*{{$obj.Name}}, error) {
	query := "SELECT {{$allFields}} FROM [dbo].[{{$obj.Name}}] WHERE
	{{- preSuffixJoin $index.FieldNames " " "=?" " AND" -}}"
	return m.queryOne(query, {{$index.GetFuncParamNames}})
}
{{else}}
func (m *_{{$obj.Name}}Mgr) FindBy{{$index.Name}}({{$index.GetFuncParam}}, offset int, limit int, sortFields ...string) ( []*{{$obj.Name}},  error) {
	orderBy := "ORDER BY %s"
	if len(sortFields) != 0 {
		orderBy = fmt.Sprintf(orderBy, strings.Join(sortFields, ","))
	} else {
		orderBy = fmt.Sprintf(orderBy, "{{$idFieldName}}")
	}

	query := fmt.Sprintf("SELECT {{$allFields}} FROM [dbo].[{{$obj.Name}}] WHERE
	{{- preSuffixJoin $index.FieldNames " " "=? " "AND" -}}
	%s  OFFSET ? Rows FETCH NEXT ? Rows ONLY", orderBy)

	return m.query(query, {{$index.GetFuncParamNames}}, offset, limit)
}
{{end}}
{{end}}

func (m *_{{$obj.Name}}Mgr) FindOne(where string, args ...interface{}) (*{{$obj.Name}}, error) {
	query := m.getQuerysql(true, where)
	return m.queryOne(query, args...)
}


func (m *_{{$obj.Name}}Mgr) Find(where string, args ...interface{}) ([]*{{$obj.Name}}, error) {
	query := m.getQuerysql(false, where)
	return m.query(query, args...)
}

func (m *_{{$obj.Name}}Mgr) FindAll() (results []*{{$obj.Name}}, err error) {
	return m.Find("")
}

func (m *_{{$obj.Name}}Mgr) FindWithOffset(where string, offset int, limit int, args ...interface{}) ([]*{{$obj.Name}}, error) {
	query := m.getQuerysql(false, where)

	if !strings.Contains(strings.ToLower(where), "ORDER BY") {
		where = " ORDER BY Name"
	}
	query = query + where + " OFFSET ? Rows FETCH NEXT ? Rows ONLY"
	args = append(args, offset)
	args = append(args, limit)

	return m.query(query, args...)
}


func (m *_{{$obj.Name}}Mgr) getQuerysql(topOne bool, where string) string {
	query := `SELECT `
	if topOne {
		query = query + ` TOP 1 `
	}
	query = query + ` {{$allFields}} FROM [dbo].[{{$obj.Name}}] WITH(NOLOCK) `

	if where != "" {
		if strings.Index(strings.Trim(where, " "), "WHERE") == -1 {
			where = " WHERE " + where
		}
		query = query + where
	}
	return query
}

func (m *_{{$obj.Name}}Mgr) Del(where string, params ...interface{}) (sql.Result, error) {
	query := "DELETE FROM [dbo].[{{$obj.Name}}]"
	if where != "" {
		query = fmt.Sprintf("DELETE FROM {{$obj.Name}} WHERE " + where)
	}
	return _db.Exec(query, params...)
}

// argument example:
// set:"a=?, b=?"
// where:"c=? and d=?"
// params:[]interface{}{"a", "b", "c", "d"}...
func (m *_{{$obj.Name}}Mgr) Update(set, where string, params ...interface{}) (sql.Result, error) {
	query := fmt.Sprintf("UPDATE [dbo].[{{$obj.Name}}] SET %s", set)
	if where != "" {
		query = fmt.Sprintf("UPDATE [dbo].[{{$obj.Name}}] SET %s WHERE %s", set, where)
	}
	return _db.Exec(query, params...)
}

{{end}}
{{end}}
{{end}}
