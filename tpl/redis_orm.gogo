{{define "redis_orm"}}package {{.GoPackage}}
{{$obj := .}}
{{if ($obj.DbSwitch "redis")}}

{{$idFieldName := $obj.GetPrimaryKeyName}}
{{$idField := $obj.GetPrimaryKey}}

{{if or (eq $obj.StoreType "set")}}
import (
	{{- if $obj.ValueField.IsNeedTransform}}
	"github.com/ezbuy/ezorm/db"
	{{- end}}
	"time"
	"fmt"
)
var (
	_ time.Time
)

{{- if or ($obj.DbContains "mysql") ($obj.DbContains "mssql")}}
func (m *_{{$obj.Name}}Mgr) AddBySQL(sql string, args ...interface{}) error {
	objs, err := m.Query(sql, args...)
	if err != nil {
		return err
	}

	for _, obj := range objs {
		if err := m.SetAdd(obj.Key, obj); err != nil {
			return err
		}
	}	
	return nil
}

func (m *_{{$obj.Name}}Mgr) DelBySQL(sql string, args ...interface{}) error {
	objs, err := m.Query(sql, args...)
	if err != nil {
		return err
	}

	for _, obj := range objs {
		if err := m.SetRem(obj.Key, obj); err != nil {
			return err
		}
	}	
	return nil
}

{{- if ne $obj.ImportSQL ""}}
func (m *_{{$obj.Name}}Mgr) Import() error {	
	return m.AddBySQL("{{$obj.ImportSQL}}")
}
{{- end}}

{{- end}}


///////////// SET /////////////////////////////////////////////////////
func (m *_{{$obj.Name}}Mgr) SetAdd(key string, obj *{{$obj.Name}}) error {
	
	{{- if $obj.ValueField.IsNeedTransform}}
		transformed_{{$obj.ValueField.Name}} := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "obj.%s" $obj.ValueField.Name)}}
		return redisSetAdd(obj, key, transformed_{{$obj.ValueField.Name}})
	{{- else}}
		return redisSetAdd(obj, key, obj.Value)
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) SetGet(key string) ([]*{{$obj.Name}}, error) {
	
	strs, err := redisSetGet(m.New{{$obj.Name}}(), key)
	if err != nil {
		return nil, err
	}

	objs := []*{{$obj.Name}}{}
	for _, str := range strs {
		obj := m.New{{$obj.Name}}()
		obj.Key = key
		{{- if $obj.ValueField.IsNeedTransform}}
			var val {{$obj.ValueField.GetTransformType.TypeOrigin}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			obj.{{$obj.ValueField.Name}} = {{- printf $obj.ValueField.GetTransformType.ConvertTo "val"}}
		{{- else}}
		if err := redisStringScan(str, &obj.Value); err != nil {
			return nil, err
		}
		{{- end}}
		objs = append(objs, obj)
	}
	return objs, nil
}

func (m *_{{$obj.Name}}Mgr) SetRem(key string, obj *{{$obj.Name}}) error {
	
	{{- if $obj.ValueField.IsNeedTransform}}
		transformed_{{$obj.ValueField.Name}} := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "obj.%s" $obj.ValueField.Name)}}
		return redisSetRem(obj, key, transformed_{{$obj.ValueField.Name}})
	{{- else}}
		return redisSetRem(obj, key, obj.Value)
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) SetDel(key string) error {
	return redisSetDel(m.New{{$obj.Name}}(), key)
}

func (m *_{{$obj.Name}}Mgr) Clear() error {
	return redisDrop(m.New{{$obj.Name}}())
}

{{- if ne $obj.ModelType ""}}
func (m *_{{$obj.Name}}Mgr) Related{{$obj.ModelType}}s(key interface{}) ([]*{{$obj.ModelType}}, error) {
	
	strs, err := redisSetGet(m.New{{$obj.Name}}(), fmt.Sprint(key))
	if err != nil {
		return nil, err
	}

	objs := []*{{$obj.ModelType}}{}
	for _, str := range strs {
		{{- if $obj.ValueField.IsNeedTransform}}
			var val {{$obj.ValueField.GetTransformType.TypeOrigin}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			transformed_val := {{- printf $obj.ValueField.GetTransformType.ConvertTo "val"}}
			obj, err := {{$obj.ModelType}}Mgr.GetById(transformed_val)
			if err != nil {
				return nil, err
			}
			objs = append(objs, obj)
		{{- else}}
			var val {{$obj.ValueField.Type}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			if obj, err := {{$obj.ModelType}}Mgr.GetById(val); err == nil {
				objs = append(objs, obj)
			}
		{{- end}}
	}
	return objs, nil
}
{{- end}}

{{end}}

{{if or (eq $obj.StoreType "zset")}}
import (
	{{- if $obj.ValueField.IsNeedTransform}}
	"github.com/ezbuy/ezorm/db"
	{{- end}}
	"time"
)
var (
	_ time.Time
)

{{- if or ($obj.DbContains "mysql") ($obj.DbContains "mssql")}}
func (m *_{{$obj.Name}}Mgr) AddBySQL(sql string, args ...interface{}) error {
	objs, err := m.Query(sql, args...)
	if err != nil {
		return err
	}
	
	for _, obj := range objs {
		if err := m.ZAdd(obj.Key, obj); err != nil {
			return err
		}
	}
	return nil
}

func (m *_{{$obj.Name}}Mgr) DelBySQL(sql string, args ...interface{}) error {
	objs, err := m.Query(sql, args...)
	if err != nil {
		return err
	}

	for _, obj := range objs {
		if err := m.ZRem(obj.Key, obj); err != nil {
			return err
		}
	}	
	return nil
}

{{- if ne $obj.ImportSQL ""}}
func (m *_{{$obj.Name}}Mgr) Import() error {	
	return m.AddBySQL("{{$obj.ImportSQL}}")
}
{{- end}}

{{- end}}


///////////// ZSET /////////////////////////////////////////////////////
func (m *_{{$obj.Name}}Mgr) ZAdd(key string, obj *{{$obj.Name}}) error {
	
	{{- if $obj.ValueField.IsNeedTransform}}
		transformed_{{$obj.ValueField.Name}} := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "obj.%s" $obj.ValueField.Name)}}
		return redisZSetAdd(obj, key, obj.Score, transformed_{{$obj.ValueField.Name}})
	{{- else}}
		return redisZSetAdd(obj, key, obj.Score, obj.Value)
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) ZRangeByScore(key string, min, max int64) ([]*{{$obj.Name}}, error) {
	
	strs, err := redisZSetRangeByScore(m.New{{$obj.Name}}(), key, min, max)
	if err != nil {
		return nil, err
	}

	objs := []*{{$obj.Name}}{}
	for _, str := range strs {
		obj := m.New{{$obj.Name}}()
		obj.Key = key
		{{- if $obj.ValueField.IsNeedTransform}}
			var val {{$obj.ValueField.GetTransformType.TypeOrigin}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			obj.{{$obj.ValueField.Name}} = {{- printf $obj.ValueField.GetTransformType.ConvertTo "val"}}
		{{- else}}
		if err := redisStringScan(str, &obj.Value); err != nil {
			return nil, err
		}
		{{- end}}
		objs = append(objs, obj)
	}
	return objs, nil
}

func (m *_{{$obj.Name}}Mgr) ZRem(key string, obj *{{$obj.Name}}) error {
	
	{{- if $obj.ValueField.IsNeedTransform}}
		transformed_{{$obj.ValueField.Name}} := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "obj.%s" $obj.ValueField.Name)}}
		return redisZSetRem(obj, key, transformed_{{$obj.ValueField.Name}})
	{{- else}}
		return redisZSetRem(obj, key, obj.Value)
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) ZDel(key string) error {	
	return redisZSetDel(m.New{{$obj.Name}}(), key)
}

func (m *_{{$obj.Name}}Mgr) Clear() error {
	return redisDrop(m.New{{$obj.Name}}())
}

{{- if ne $obj.ModelType ""}}
func (m *_{{$obj.Name}}Mgr) ZRangeRelated{{$obj.ModelType}}(key string, min, max int64) ([]*{{$obj.ModelType}}, error) {
	
	strs, err := redisZSetRangeByScore(m.New{{$obj.Name}}(), key, min, max)
	if err != nil {
		return nil, err
	}

	objs := []*{{$obj.ModelType}}{}
	for _, str := range strs {
		{{- if $obj.ValueField.IsNeedTransform}}
			var val {{$obj.ValueField.GetTransformType.TypeOrigin}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			transformed_val := {{- printf $obj.ValueField.GetTransformType.ConvertTo "val"}}
			obj, err := {{$obj.ModelType}}Mgr.GetById(transformed_val)
			if err != nil {
				return nil, err
			}
			objs = append(objs, obj)
		{{- else}}
			var val {{$obj.ValueField.Type}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			if obj, err := {{$obj.ModelType}}Mgr.GetById(val); err == nil {
				objs = append(objs, obj)
			}
		{{- end}}
	}
	return objs, nil
}
{{- end}}

{{end}}

{{if or (eq $obj.StoreType "geo")}}
import (
	{{- if $obj.ValueField.IsNeedTransform}}
	"github.com/ezbuy/ezorm/db"
	{{- end}}
	"time"
	redis "gopkg.in/redis.v5"
)
var (
	_ time.Time
)

{{- if or ($obj.DbContains "mysql") ($obj.DbContains "mssql")}}
func (m *_{{$obj.Name}}Mgr) AddBySQL(sql string, args ...interface{}) error {
	objs, err := m.Query(sql, args...)
	if err != nil {
		return err
	}

	for _, obj := range objs {
		if err := m.GeoAdd(obj.Key, obj); err != nil {
			return err
		}
	}	
	return nil
}

func (m *_{{$obj.Name}}Mgr) DelBySQL(sql string, args ...interface{}) error {
	objs, err := m.Query(sql, args...)
	if err != nil {
		return err
	}

	for _, obj := range objs {
		if err := m.GeoRem(obj.Key, obj); err != nil {
			return err
		}
	}	
	return nil
}

{{- if ne $obj.ImportSQL ""}}
func (m *_{{$obj.Name}}Mgr) Import() error {	
	return m.AddBySQL("{{$obj.ImportSQL}}")
}
{{- end}}

{{- end}}


///////////// GEO /////////////////////////////////////////////////////
func (m *_{{$obj.Name}}Mgr) GeoAdd(key string, obj *{{$obj.Name}}) error {
	
	{{- if $obj.ValueField.IsNeedTransform}}
		transformed_{{$obj.ValueField.Name}} := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "obj.%s" $obj.ValueField.Name)}}
		return redisGeoAdd(obj, key, obj.Longitude, obj.Latitude, transformed_{{$obj.ValueField.Name}})
	{{- else}}
		return redisGeoAdd(obj, key, obj.Longitude, obj.Latitude, obj.Value)
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) GeoRadius(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) ([]*{{$obj.Name}}, error) {
	
	strs, err := redisGeoRadius(m.New{{$obj.Name}}(), key, longitude, latitude, query)
	if err != nil {
		return nil, err
	}

	objs := []*{{$obj.Name}}{}
	for _, str := range strs {
		obj := m.New{{$obj.Name}}()
		obj.Key = key
		{{- if $obj.ValueField.IsNeedTransform}}
			var val {{$obj.ValueField.GetTransformType.TypeOrigin}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			obj.{{$obj.ValueField.Name}} = {{- printf $obj.ValueField.GetTransformType.ConvertTo "val"}}
		{{- else}}
		if err := redisStringScan(str, &obj.Value); err != nil {
			return nil, err
		}
		{{- end}}
		objs = append(objs, obj)
	}
	return objs, nil
}

{{- if ne $obj.ModelType ""}}
func (m *_{{$obj.Name}}Mgr) GeoRadiusRelated{{$obj.ModelType}}s(key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) ([]*{{$obj.ModelType}}, error) {
	
	strs, err := redisGeoRadius(m.New{{$obj.Name}}(), key, longitude, latitude, query)
	if err != nil {
		return nil, err
	}

	objs := []*{{$obj.ModelType}}{}
	for _, str := range strs {
		{{- if $obj.ValueField.IsNeedTransform}}
			var val {{$obj.ValueField.GetTransformType.TypeOrigin}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			transformed_val := {{- printf $obj.ValueField.GetTransformType.ConvertTo "val"}}
			obj, err := {{$obj.ModelType}}Mgr.GetById(transformed_val)
			if err != nil {
				return nil, err
			}
			objs = append(objs, obj)
		{{- else}}
			var val {{$obj.ValueField.Type}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			if obj, err := {{$obj.ModelType}}Mgr.GetById(val); err == nil {
				objs = append(objs, obj)
			}
		{{- end}}
	}
	return objs, nil
}
{{- end}}

func (m *_{{$obj.Name}}Mgr) GeoRem(key string, obj *{{$obj.Name}}) error {
	
	return redisZSetRem(m.New{{$obj.Name}}(), key, obj)
}

func (m *_{{$obj.Name}}Mgr) GeoDel(key string) error {
	
	return redisGeoDel(m.New{{$obj.Name}}(), key)
}

func (m *_{{$obj.Name}}Mgr) Clear() error {
	return redisDrop(m.New{{$obj.Name}}())
}

{{end}}

{{if or (eq $obj.StoreType "list")}}
import (
	{{- if $obj.ValueField.IsNeedTransform}}
	"github.com/ezbuy/ezorm/db"
	{{- end}}
	"time"
)
var (
	_ time.Time
)

{{- if or ($obj.DbContains "mysql") ($obj.DbContains "mssql")}}
func (m *_{{$obj.Name}}Mgr) AddBySQL(sql string, args ...interface{}) error {
	objs, err := m.Query(sql, args...)
	if err != nil {
		return err
	}

	for _, obj := range objs {
		if _, err := m.ListLPush(obj.Key, obj); err != nil {
			return err
		}
	}	
	return nil
}

func (m *_{{$obj.Name}}Mgr) DelBySQL(sql string, args ...interface{}) error {
	objs, err := m.Query(sql, args...)
	if err != nil {
		return err
	}

	for _, obj := range objs {
		if err := m.ListRem(obj.Key, obj); err != nil {
			return err
		}
	}	
	return nil
}

{{- if ne $obj.ImportSQL ""}}
func (m *_{{$obj.Name}}Mgr) Import() error {	
	return m.AddBySQL("{{$obj.ImportSQL}}")
}
{{- end}}

{{- end}}


///////////// LIST /////////////////////////////////////////////////////
func (m *_{{$obj.Name}}Mgr) ListLPush(key string, obj *{{$obj.Name}}) (int64, error) {
	
	{{- if $obj.ValueField.IsNeedTransform}}
		transformed_{{$obj.ValueField.Name}} := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "obj.%s" $obj.ValueField.Name)}}
		return redisListLPush(obj, key, transformed_{{$obj.ValueField.Name}})
	{{- else}}
		return redisListLPush(obj, key, obj.Value)
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) ListRPush(key string, obj *{{$obj.Name}}) (int64, error) {
	
	{{- if $obj.ValueField.IsNeedTransform}}
		transformed_{{$obj.ValueField.Name}} := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "obj.%s" $obj.ValueField.Name)}}
		return redisListRPush(obj, key, transformed_{{$obj.ValueField.Name}})
	{{- else}}
		return redisListRPush(obj, key, obj.Value)
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) ListLPop(key string, obj *{{$obj.Name}}) (error) {
	
	obj.Key = key
	{{- if $obj.ValueField.IsNeedTransform}}
		var val {{$obj.ValueField.GetTransformType.TypeOrigin}}
		if err := redisListLPop(obj, key, &val); err != nil {
			return err
		}
		obj.{{$obj.ValueField.Name}} = {{- printf $obj.ValueField.GetTransformType.ConvertTo "val"}}
		return nil
	{{- else}}
		return redisListLPop(obj, key, &obj.{{$obj.ValueField.Name}})
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) ListRPop(key string, obj *{{$obj.Name}}) (error) {
	
	obj.Key = key
	{{- if $obj.ValueField.IsNeedTransform}}
		var val {{$obj.ValueField.GetTransformType.TypeOrigin}}
		if err := redisListRPop(obj, key, &val); err != nil {
			return err
		}
		obj.{{$obj.ValueField.Name}} = {{- printf $obj.ValueField.GetTransformType.ConvertTo "val"}}
		return nil
	{{- else}}
		return redisListRPop(obj, key, &obj.{{$obj.ValueField.Name}})
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) ListInsertBefore(key string, pivot, obj *{{$obj.Name}}) (int64, error) {
	
	{{- if $obj.ValueField.IsNeedTransform}}
		transformed_{{$obj.ValueField.Name}}_pivot := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "pivot.%s" $obj.ValueField.Name)}}
		transformed_{{$obj.ValueField.Name}}_obj := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "obj.%s" $obj.ValueField.Name)}}
		return redisListInsertBefore(obj, key, transformed_{{$obj.ValueField.Name}}_pivot, transformed_{{$obj.ValueField.Name}}_obj)
	{{- else}}
		return redisListInsertBefore(obj, key, pivot.{{$obj.ValueField.Name}}, obj.{{$obj.ValueField.Name}})
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) ListInsertAfter(key string, pivot, obj *{{$obj.Name}}) (int64, error) {
	
	{{- if $obj.ValueField.IsNeedTransform}}
		transformed_{{$obj.ValueField.Name}}_pivot := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "pivot.%s" $obj.ValueField.Name)}}
		transformed_{{$obj.ValueField.Name}}_obj := {{- printf $obj.ValueField.GetTransformType.ConvertBack (printf "obj.%s" $obj.ValueField.Name)}}
		return redisListInsertAfter(obj, key, transformed_{{$obj.ValueField.Name}}_pivot, transformed_{{$obj.ValueField.Name}}_obj)
	{{- else}}
		return redisListInsertAfter(obj, key, pivot.{{$obj.ValueField.Name}}, obj.{{$obj.ValueField.Name}})
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) ListRange(key string, start, stop int64) ([]*{{$obj.Name}}, error) {
	
	strs, err := redisListRange(m.New{{$obj.Name}}(), key, start, stop)
	if err != nil {
		return nil, err
	}

	objs := []*{{$obj.Name}}{}
	for _, str := range strs {
		obj := m.New{{$obj.Name}}()
		obj.Key = key
		{{- if $obj.ValueField.IsNeedTransform}}
			var val {{$obj.ValueField.GetTransformType.TypeOrigin}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			obj.{{$obj.ValueField.Name}} = {{- printf $obj.ValueField.GetTransformType.ConvertTo "val"}}
		{{- else}}
		if err := redisStringScan(str, &obj.Value); err != nil {
			return nil, err
		}
		{{- end}}
		objs = append(objs, obj)
	}
	return objs, nil	
}

{{- if ne $obj.ModelType ""}}
func (m *_{{$obj.Name}}Mgr) ListRangeRelated{{$obj.ModelType}}s(key string, start, stop int64) ([]*{{$obj.ModelType}}, error) {
	
	strs, err := redisListRange(m.New{{$obj.Name}}(), key, start, stop)
	if err != nil {
		return nil, err
	}

	objs := []*{{$obj.ModelType}}{}
	for _, str := range strs {
		{{- if $obj.ValueField.IsNeedTransform}}
			var val {{$obj.ValueField.GetTransformType.TypeOrigin}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			transformed_val := {{- printf $obj.ValueField.GetTransformType.ConvertTo "val"}}
			obj, err := {{$obj.ModelType}}Mgr.GetById(transformed_val)
			if err != nil {
				return nil, err
			}
			objs = append(objs, obj)
		{{- else}}
			var val {{$obj.ValueField.Type}}
			if err := redisStringScan(str, &val); err != nil {
				return nil, err
			}
			if obj, err := {{$obj.ModelType}}Mgr.GetById(val); err == nil {
				objs = append(objs, obj)
			}
		{{- end}}
	}
	return objs, nil
}
{{- end}}

func (m *_{{$obj.Name}}Mgr) ListCount(key string) (int64, error) {
	
	return redisListCount(m.New{{$obj.Name}}(), key)
}

func (m *_{{$obj.Name}}Mgr) ListRem(key string, obj *{{$obj.Name}}) error {
	
	return redisListRemove(m.New{{$obj.Name}}(), key, obj)
}

func (m *_{{$obj.Name}}Mgr) ListDel(key string) error {
	
	return redisListDel(m.New{{$obj.Name}}(), key)
}

func (m *_{{$obj.Name}}Mgr) Clear() error {
	return redisDrop(m.New{{$obj.Name}}())
}

{{end}}


{{if or (eq $obj.StoreType "json") (eq $obj.StoreType "hash")}}
///////////// JSON & HASH /////////////////////////////////////////////////////
import (
	"github.com/ezbuy/ezorm/db"
	"time"
	"fmt"
)
var (
	_ time.Time
)

{{- if or ($obj.DbContains "mysql") ($obj.DbContains "mssql")}}
func (m *_{{$obj.Name}}Mgr) AddBySQL(sql string, args ...interface{}) error {
	objs, err := m.Query(sql, args...)
	if err != nil {
		return err
	}

	for _, obj := range objs {
		if err := m.Set(obj); err != nil {
			return err
		}
	}	
	return nil
}

func (m *_{{$obj.Name}}Mgr) DelBySQL(sql string, args ...interface{}) error {
	objs, err := m.Query(sql, args...)
	if err != nil {
		return err
	}

	for _, obj := range objs {
		if err := m.Remove(obj); err != nil {
			return err
		}
	}	
	return nil
}

{{- if ne $obj.ImportSQL ""}}
func (m *_{{$obj.Name}}Mgr) Import() error {	
	return m.AddBySQL("{{$obj.ImportSQL}}")
}
{{- end}}
{{- end}}

func (m *_{{$obj.Name}}Mgr) Set(obj *{{$obj.Name}}) error {
	
	{{- if eq $obj.StoreType "json"}}
	pipeline := redisPipeline()
	if err := pipeline.JsonSet(obj); err != nil {
	 	return err
	}
	//! object index set
		{{- range $index, $field := $obj.Fields}}
		{{- if $field.HasIndex}}
		{{- if $idField.IsNeedTransform}}
			transformed_{{$idFieldName.Name}}_primary := {{- printf $idField.GetTransformType.ConvertBack (printf "obj.%s" $idField.Name)}}
			if err := pipeline.IndexSet(obj, "{{$field.Name}}", transformed_{{$idFieldName.Name}}_primary); err != nil {
				return err
			}
		{{else}}
			if err := pipeline.IndexSet(obj, "{{$field.Name}}", obj.{{$field.Name}}, obj.{{$idFieldName}}); err != nil {
				return err
			}
		{{- end}}
		{{- end}}
		{{- end}}
	//! object primary key set
		{{- if $idField.IsNeedTransform}}
			transformed_{{$idFieldName.Name}}_primary := {{- printf $idField.GetTransformType.ConvertBack (printf "obj.%s" $idField.Name)}}
			if err := pipeline.ListLPush(obj, "{{$idFieldName}}", transformed_{{$idFieldName.Name}}_primary); err != nil {
				return err
			}
		{{else}}
			if err := pipeline.ListLPush(obj, "{{$idFieldName}}", obj.{{$idFieldName}}); err != nil {
				return err
			}
		{{- end}}
		_, err := pipeline.Exec()
		return err
	{{- else if eq $obj.StoreType "hash"}}
	//! object field set
		pipeline := redisPipeline()
		{{- range $index, $field := $obj.Fields}}
		{{- if $field.IsNeedTransform}}
			transformed_{{$field.Name}}_field := {{- printf $field.GetTransformType.ConvertBack (printf "obj.%s" $field.Name)}}
			if err := pipeline.FieldSet(obj, "{{$field.Name}}", transformed_{{$field.Name}}_field); err != nil {
				return err
			}
		{{- else}}
			if err := pipeline.FieldSet(obj, "{{$field.Name}}", obj.{{$field.Name}}); err != nil {
				return err
			}
		{{- end}}
		{{- end}}
	//! object index set
		{{- range $index, $field := $obj.Fields}}
		{{- if $field.HasIndex}}

		{{- if $idField.IsNeedTransform}}
			transformed_{{$idFieldName.Name}}_primary := {{- printf $idField.GetTransformType.ConvertBack (printf "obj.%s" $idField.Name)}}
			if err := pipeline.IndexSet(obj, "{{$field.Name}}", obj.{{$field.Name}}, transformed_{{$idFieldName.Name}}_primary); err != nil {
				return err
			}
		{{else}}
			if err := pipeline.IndexSet(obj, "{{$field.Name}}", obj.{{$field.Name}}, obj.{{$idFieldName}}); err != nil {
				return err
			}
		{{- end}}

		{{- end}}
		{{- end}}
	//! object primary key set
		{{- if $idField.IsNeedTransform}}
			transformed_{{$idFieldName.Name}}_primary := {{- printf $idField.GetTransformType.ConvertBack (printf "obj.%s" $idField.Name)}}
			if err := pipeline.ListLPush(obj, "{{$idFieldName}}", transformed_{{$idFieldName.Name}}_primary); err != nil {
				return err
			}
		{{else}}
			if err := pipeline.ListLPush(obj, "{{$idFieldName}}", obj.{{$idFieldName}}); err != nil {
				return err
			}
		{{- end}}
		_, err := pipeline.Exec()
		return err
	{{- else}}
	return errors.New("unsupport object store type")	
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) Remove(obj *{{$obj.Name}}) error {
	
	{{- if or (eq $obj.StoreType "json") (eq $obj.StoreType "hash")}}
		if err := redisDelObject(obj); err != nil {
			return err
		}
		{{- range $index, $field := $obj.Fields}}
			{{- if $field.HasIndex}}
			if err := redisIndexRemove(obj, "{{$field.Name}}", obj.{{$field.Name}}, obj.{{$idField.Name}}); err != nil {
				return err
			}
			{{- end}}
		{{- end}}
		return redisListRemove(obj, "{{$idFieldName}}", obj.{{$idField.Name}})
	{{- else}}
		return errors.New("unsupport object store type")	
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) Clear() error {
	return redisDrop(m.New{{$obj.Name}}())
}

func (m *_{{$obj.Name}}Mgr) Get(obj *{{$obj.Name}}) error {
	
	{{- if eq $obj.StoreType "json"}}
	return redisJsonGet(obj)
	{{- else}}
	//! object field get
		{{- range $index, $field := $obj.Fields}}
		{{- if $field.IsNeedTransform}}
			var {{$field.Name}} {{$field.GetTransformType.TypeOrigin}}
			if err := redisFieldGet(obj, "{{$field.Name}}", &{{$field.Name}}); err != nil {
				return err
			}
			obj.{{$field.Name}} = {{- printf $field.GetTransformType.ConvertTo $field.Name}}
		{{- else}}
			if err := redisFieldGet(obj, "{{$field.Name}}", &obj.{{$field.Name}}); err != nil {
				return err
			}
		{{- end}}
		{{- end}}
		return nil
	{{- end}}
}

func (m *_{{$obj.Name}}Mgr) GetById(id {{$idField.Type}}) (*{{$obj.Name}}, error) {
	
	obj := m.New{{$obj.Name}}()
	obj.{{$idFieldName}} = id
	if err := m.Get(obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (m *_{{$obj.Name}}Mgr) GetByIds(ids []{{$idField.Type}}) ([]*{{$obj.Name}}, error) {
	
	objs := make([]*{{$obj.Name}}, 0, len(ids))
	for _, id := range ids {
		obj, err := m.GetById(id)
		if err != nil {
			return objs, err
		}
		objs = append(objs, obj)
	} 
	return objs, nil
}


{{- range $field := .Fields}} 
{{- if $field.HasIndex}}

func (m *_{{$obj.Name}}Mgr) GetBy{{$field.Name}}(val {{$field.GetGoType}}) ([]*{{$obj.Name}}, error) {
	
	strs, err := redisIndexGet(m.New{{$obj.Name}}(), "{{$field.Name}}", val)
	if err != nil {
		return nil, err
	}
	objs := make([]*{{$obj.Name}}, 0, len(strs))
	for _, str := range strs {
		var id {{$idField.Type}}
		if err := redisStringScan(str, &id); err != nil {
			return nil, err
		}

		obj, err := m.GetById(id)
		if err != nil {
			return nil, err
		}

		objs = append(objs, obj)
	}
	return objs, nil
}
{{- end}}
{{- end}}



{{if gt (len $obj.Indexes) 0}}
func (m *_{{$obj.Name}}Mgr) GetByIndexes(indexes map[string]interface{}) ([]*{{$obj.Name}}, error) {
	
	index_keys := []string{}
	{{- range $index, $field := $obj.Fields}}
	{{- if $field.HasIndex}}	
		{{- if $field.IsNeedTransform}}
			if val, ok := indexes["{{$field.Name}}"]; ok {
				transformed_{{$field.Name}}_field := {{- printf $field.GetTransformType.ConvertBack (printf "val.(%s)" $field.GetTransformType.TypeTarget)}}
				index_keys = append(index_keys, fmt.Sprintf("{{$field.Name}}:%v", transformed_{{$field.Name}}_field))
			}
		{{- else}}
			if val, ok := indexes["{{$field.Name}}"]; ok {
				index_keys = append(index_keys, fmt.Sprintf("{{$field.Name}}:%v", val))
			}
		{{- end}}
	{{- end}}
	{{- end}}

	
	strs, err :=  redisMultiIndexesGet(m.New{{$obj.Name}}(), index_keys...)
	if err != nil {
		return nil, err
	}

	objs := make([]*{{$obj.Name}}, 0, len(strs))
	for _, str := range strs {
		var id {{$idField.Type}}
		if err := redisStringScan(str, &id); err != nil {
			return nil, err
		}

		obj, err := m.GetById(id)
		if err != nil {
			return nil, err
		}

		objs = append(objs, obj)
	}
	return objs, nil
} 
{{end}}

func (m *_{{$obj.Name}}Mgr) ListRange(start, stop int64) ([]*{{$obj.Name}}, error) {
	
	strs, err := redisListRange(m.New{{$obj.Name}}(), "{{$idFieldName}}", start, stop)
	if err != nil {
		return nil, err
	}

	objs := []*{{$obj.Name}}{}
	for _, str := range strs {
		var id {{$idField.Type}}
		if err := redisStringScan(str, &id); err != nil {
			return nil, err
		}

		obj, err := m.GetById(id)
		if err != nil {
			return nil, err
		}

		objs = append(objs, obj)
	}
	return objs, nil	
}

func (m *_{{$obj.Name}}Mgr) ListCount() (int64, error) {
	return redisListCount(m.New{{$obj.Name}}(), "{{$idFieldName}}")
}

{{end}}
{{end}}
{{end}}
